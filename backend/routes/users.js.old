const express = require('express');
const pool = require('../config/database');
const { authenticateToken } = require('../middleware/auth');

const router = express.Router();

// Middleware pour v√©rifier si l'utilisateur est admin
const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ error: 'Acc√®s refus√©. Droits administrateur requis.' });
    }
    next();
};

// R√©cup√©rer tous les utilisateurs (Admin seulement)
router.get('/', authenticateToken, isAdmin, async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                u.id, 
                u.name, 
                u.email, 
                u.ministry, 
                u.role, 
                u.is_active,
                u.created_at,
                u.last_login,
                u.approved_at,
                approver.name as approved_by_name
            FROM users u
            LEFT JOIN users approver ON u.approved_by = approver.id
            ORDER BY u.created_at DESC
        `);
        
        res.json(result.rows);
    } catch (error) {
        console.error('Erreur r√©cup√©ration utilisateurs:', error);
        res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des utilisateurs' });
    }
});

// R√©cup√©rer les utilisateurs en attente de validation
router.get('/pending', authenticateToken, isAdmin, async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT id, name, email, ministry, created_at 
            FROM users 
            WHERE is_active = false 
            ORDER BY created_at ASC
        `);
        
        res.json({
            count: result.rows.length,
            users: result.rows
        });
    } catch (error) {
        console.error('Erreur r√©cup√©ration utilisateurs en attente:', error);
        res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration' });
    }
});

// Activer un utilisateur (Admin seulement)
router.put('/:id/activate', authenticateToken, isAdmin, async (req, res) => {
    const { id } = req.params;
    
    try {
        // V√©rifier que l'utilisateur existe
        const checkUser = await pool.query(
            'SELECT * FROM users WHERE id = $1',
            [id]
        );
        
        if (checkUser.rows.length === 0) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }
        
        if (checkUser.rows[0].is_active) {
            return res.status(400).json({ error: 'Utilisateur d√©j√† actif' });
        }
        
        // Activer l'utilisateur
        const result = await pool.query(`
            UPDATE users 
            SET is_active = true, 
                approved_by = $1, 
                approved_at = CURRENT_TIMESTAMP 
            WHERE id = $2 
            RETURNING id, name, email, is_active`,
            [req.user.id, id]
        );
        
        console.log(`‚úÖ Utilisateur activ√©: ${result.rows[0].email} par ${req.user.email}`);
        
        res.json({
            message: 'Utilisateur activ√© avec succ√®s',
            user: result.rows[0]
        });
        
        // TODO: Envoyer un email de notification √† l'utilisateur
        
    } catch (error) {
        console.error('Erreur activation utilisateur:', error);
        res.status(500).json({ error: 'Erreur lors de l\'activation' });
    }
});

// D√©sactiver un utilisateur (Admin seulement)
router.put('/:id/deactivate', authenticateToken, isAdmin, async (req, res) => {
    const { id } = req.params;
    
    try {
        // Emp√™cher la d√©sactivation de son propre compte
        if (req.user.id === parseInt(id)) {
            return res.status(400).json({ error: 'Vous ne pouvez pas d√©sactiver votre propre compte' });
        }
        
        // V√©rifier que l'utilisateur existe
        const checkUser = await pool.query(
            'SELECT * FROM users WHERE id = $1',
            [id]
        );
        
        if (checkUser.rows.length === 0) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }
        
        // Emp√™cher la d√©sactivation du dernier admin
        if (checkUser.rows[0].role === 'admin') {
            const adminCount = await pool.query(
                'SELECT COUNT(*) FROM users WHERE role = $1 AND is_active = true',
                ['admin']
            );
            
            if (parseInt(adminCount.rows[0].count) <= 1) {
                return res.status(400).json({ error: 'Impossible de d√©sactiver le dernier administrateur' });
            }
        }
        
        // D√©sactiver l'utilisateur
        const result = await pool.query(
            'UPDATE users SET is_active = false WHERE id = $1 RETURNING id, name, email, is_active',
            [id]
        );
        
        console.log(`‚ö†Ô∏è Utilisateur d√©sactiv√©: ${result.rows[0].email} par ${req.user.email}`);
        
        res.json({
            message: 'Utilisateur d√©sactiv√©',
            user: result.rows[0]
        });
        
    } catch (error) {
        console.error('Erreur d√©sactivation utilisateur:', error);
        res.status(500).json({ error: 'Erreur lors de la d√©sactivation' });
    }
});

// Changer le r√¥le d'un utilisateur (Admin seulement)
router.put('/:id/role', authenticateToken, isAdmin, async (req, res) => {
    const { id } = req.params;
    const { role } = req.body;
    
    if (!['user', 'admin'].includes(role)) {
        return res.status(400).json({ error: 'R√¥le invalide' });
    }
    
    try {
        // Emp√™cher de modifier son propre r√¥le
        if (req.user.id === parseInt(id)) {
            return res.status(400).json({ error: 'Vous ne pouvez pas modifier votre propre r√¥le' });
        }
        
        // V√©rifier qu'on ne supprime pas le dernier admin
        if (role === 'user') {
            const currentUser = await pool.query(
                'SELECT role FROM users WHERE id = $1',
                [id]
            );
            
            if (currentUser.rows[0]?.role === 'admin') {
                const adminCount = await pool.query(
                    'SELECT COUNT(*) FROM users WHERE role = $1 AND is_active = true',
                    ['admin']
                );
                
                if (parseInt(adminCount.rows[0].count) <= 1) {
                    return res.status(400).json({ error: 'Impossible de retirer le dernier administrateur' });
                }
            }
        }
        
        const result = await pool.query(
            'UPDATE users SET role = $1 WHERE id = $2 RETURNING id, name, email, role',
            [role, id]
        );
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }
        
        console.log(`üîÑ R√¥le modifi√© pour ${result.rows[0].email}: ${role} par ${req.user.email}`);
        
        res.json({
            message: 'R√¥le modifi√© avec succ√®s',
            user: result.rows[0]
        });
        
    } catch (error) {
        console.error('Erreur modification r√¥le:', error);
        res.status(500).json({ error: 'Erreur lors de la modification du r√¥le' });
    }
});

// Supprimer un utilisateur (Admin seulement)
router.delete('/:id', authenticateToken, isAdmin, async (req, res) => {
    const { id } = req.params;
    
    try {
        // Emp√™cher la suppression de son propre compte
        if (req.user.id === parseInt(id)) {
            return res.status(400).json({ error: 'Vous ne pouvez pas supprimer votre propre compte' });
        }
        
        // V√©rifier que l'utilisateur existe
        const checkUser = await pool.query(
            'SELECT * FROM users WHERE id = $1',
            [id]
        );
        
        if (checkUser.rows.length === 0) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }
        
        // Emp√™cher la suppression du dernier admin
        if (checkUser.rows[0].role === 'admin') {
            const adminCount = await pool.query(
                'SELECT COUNT(*) FROM users WHERE role = $1',
                ['admin']
            );
            
            if (parseInt(adminCount.rows[0].count) <= 1) {
                return res.status(400).json({ error: 'Impossible de supprimer le dernier administrateur' });
            }
        }
        
        // Supprimer l'utilisateur
        const result = await pool.query(
            'DELETE FROM users WHERE id = $1 RETURNING id, name, email',
            [id]
        );
        
        console.log(`üóëÔ∏è Utilisateur supprim√©: ${result.rows[0].email} par ${req.user.email}`);
        
        res.json({
            message: 'Utilisateur supprim√©',
            deleted: result.rows[0]
        });
        
    } catch (error) {
        console.error('Erreur suppression utilisateur:', error);
        res.status(500).json({ error: 'Erreur lors de la suppression' });
    }
});

// Statistiques des utilisateurs (Admin seulement)
router.get('/stats', authenticateToken, isAdmin, async (req, res) => {
    try {
        const stats = await pool.query(`
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN is_active = true THEN 1 END) as active,
                COUNT(CASE WHEN is_active = false THEN 1 END) as pending,
                COUNT(CASE WHEN role = 'admin' THEN 1 END) as admins,
                COUNT(CASE WHEN role = 'user' THEN 1 END) as users
            FROM users
        `);
        
        const byMinistry = await pool.query(`
            SELECT 
                ministry,
                COUNT(*) as count,
                COUNT(CASE WHEN is_active = true THEN 1 END) as active
            FROM users
            GROUP BY ministry
            ORDER BY count DESC
        `);
        
        const recentSignups = await pool.query(`
            SELECT 
                DATE(created_at) as date,
                COUNT(*) as signups
            FROM users
            WHERE created_at > CURRENT_DATE - INTERVAL '30 days'
            GROUP BY DATE(created_at)
            ORDER BY date DESC
        `);
        
        res.json({
            overview: stats.rows[0],
            byMinistry: byMinistry.rows,
            recentSignups: recentSignups.rows
        });
        
    } catch (error) {
        console.error('Erreur statistiques utilisateurs:', error);
        res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des statistiques' });
    }
});

module.exports = router;

// Route pour cr√©er un utilisateur
router.post('/create', authenticateToken, async (req, res) => {
    try {
        // V√©rifier que l'utilisateur est admin
        if (req.user.role !== 'admin') {
            return res.status(403).json({ error: 'Acc√®s refus√©' });
        }
        
        const { name, email, password, role, allowed_ministries } = req.body;
        
        // Hasher le mot de passe
        const bcrypt = require('bcrypt');
        const hashedPassword = await bcrypt.hash(password, 10);
        
        // Cr√©er l'utilisateur
        const result = await pool.query(
            `INSERT INTO users (name, email, password, role, ministry, allowed_ministries, is_active, created_at) 
             VALUES ($1, $2, $3, $4, $5, $6, true, NOW()) 
             RETURNING id, name, email, role`,
            [name, email, hashedPassword, role, allowed_ministries[0] || 'Multi', allowed_ministries]
        );
        
        // Cr√©er les permissions par d√©faut selon le r√¥le
        const userId = result.rows[0].id;
        let canRead = true, canWrite = false, canUpdate = false, canDelete = false;
        
        if (role === 'editor') {
            canWrite = true;
            canUpdate = true;
        } else if (role === 'admin') {
            canWrite = true;
            canUpdate = true;
            canDelete = true;
        }
        
        await pool.query(
            `INSERT INTO permissions (user_id, resource, can_read, can_write, can_update, can_delete) 
             VALUES ($1, 'actions', $2, $3, $4, $5)`,
            [userId, canRead, canWrite, canUpdate, canDelete]
        );
        
        res.json({ success: true, user: result.rows[0] });
        
    } catch (error) {
        console.error('Erreur cr√©ation utilisateur:', error);
        res.status(500).json({ error: error.message });
    }
});

// Route pour modifier les minist√®res d'un utilisateur
router.put('/:id/ministries', authenticateToken, async (req, res) => {
    try {
        if (req.user.role !== 'admin') {
            return res.status(403).json({ error: 'Acc√®s refus√©' });
        }
        
        const { id } = req.params;
        const { allowed_ministries } = req.body;
        
        await pool.query(
            'UPDATE users SET allowed_ministries = $1 WHERE id = $2',
            [allowed_ministries, id]
        );
        
        res.json({ success: true });
        
    } catch (error) {
        console.error('Erreur mise √† jour minist√®res:', error);
        res.status(500).json({ error: error.message });
    }
});

// Route pour changer le mot de passe
router.put('/:id/password', authenticateToken, async (req, res) => {
    try {
        // V√©rifier que l'utilisateur est admin ou modifie son propre mot de passe
        if (req.user.role !== 'admin' && req.user.id !== parseInt(req.params.id)) {
            return res.status(403).json({ error: 'Acc√®s refus√©' });
        }
        
        const { password } = req.body;
        
        if (!password || password.length < 6) {
            return res.status(400).json({ error: 'Le mot de passe doit contenir au moins 6 caract√®res' });
        }
        
        // Hasher le nouveau mot de passe
        const bcrypt = require('bcrypt');
        const hashedPassword = await bcrypt.hash(password, 10);
        
        // Mettre √† jour dans la base
        await pool.query(
            'UPDATE users SET password = $1 WHERE id = $2',
            [hashedPassword, req.params.id]
        );
        
        res.json({ success: true, message: 'Mot de passe modifi√© avec succ√®s' });
        
    } catch (error) {
        console.error('Erreur changement mot de passe:', error);
        res.status(500).json({ error: 'Erreur lors du changement de mot de passe' });
    }
});

// Route pour changer le statut actif/inactif
router.put('/:id/status', authenticateToken, async (req, res) => {
    try {
        if (req.user.role !== 'admin') {
            return res.status(403).json({ error: 'Acc√®s refus√©' });
        }
        
        const { is_active } = req.body;
        
        await pool.query(
            'UPDATE users SET is_active = $1 WHERE id = $2',
            [is_active, req.params.id]
        );
        
        res.json({ success: true });
        
    } catch (error) {
        console.error('Erreur modification statut:', error);
        res.status(500).json({ error: error.message });
    }
});

// Route pour lister tous les utilisateurs (admin seulement)
router.get('/', authenticateToken, async (req, res) => {
    try {
        if (req.user.role !== 'admin') {
            return res.status(403).json({ error: 'Acc√®s refus√©' });
        }
        
        const result = await pool.query(
            'SELECT id, name, email, role, ministry, is_active, allowed_ministries FROM users ORDER BY id'
        );
        
        res.json(result.rows);
        
    } catch (error) {
        console.error('Erreur r√©cup√©ration utilisateurs:', error);
        res.status(500).json({ error: error.message });
    }
});
