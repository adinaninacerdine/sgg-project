<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SGG - Système de Gestion des Actions Ministérielles</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: linear-gradient(135deg, #1E3A8A 0%, #3B82F6 100%);
            --secondary: linear-gradient(135deg, #065F46 0%, #10B981 100%);
            --success: linear-gradient(135deg, #059669 0%, #34D399 100%);
            --danger: linear-gradient(135deg, #DC2626 0%, #F87171 100%);
            --warning: linear-gradient(135deg, #D97706 0%, #FCD34D 100%);
            --info: linear-gradient(135deg, #0EA5E9 0%, #7DD3FC 100%);
            --dark: #0F172A;
            --light: #F0F9FF;
            --bg: #F8FAFC;
            --text: #1E293B;
            --navy: #1E3A8A;
            --sky-blue: #3B82F6;
            --emerald: #10B981;
            --shadow: rgba(30, 58, 138, 0.1);
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(180deg, var(--bg) 0%, #E0F2FE 100%);
            color: var(--text);
            min-height: 100vh;
        }

        /* Styles pour l'écran de connexion */
        .auth-container {
            display: flex;
            min-height: 100vh;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            animation: gradientShift 15s ease infinite;
            background-size: 400% 400%;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .auth-box {
            background: white;
            border-radius: 30px;
            padding: 50px;
            width: 90%;
            max-width: 480px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
            animation: slideUp 0.6s ease;
        }

        @keyframes slideUp {
            from {
                transform: translateY(50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .auth-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .auth-logo {
            width: 80px;
            height: 80px;
            background: var(--primary);
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 40px;
            color: white;
            margin: 0 auto 20px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .auth-title {
            font-size: 32px;
            font-weight: 700;
            background: var(--primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .auth-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            background: #F1F5F9;
            padding: 5px;
            border-radius: 15px;
        }

        .auth-tab {
            flex: 1;
            padding: 12px;
            border: none;
            background: transparent;
            border-radius: 10px;
            font-weight: 600;
            color: #64748B;
            cursor: pointer;
            transition: all 0.3s;
        }

        .auth-tab.active {
            background: white;
            color: var(--navy);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #334155;
            font-size: 14px;
        }

        .form-input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #E2E8F0;
            border-radius: 12px;
            font-size: 15px;
            transition: all 0.3s;
            background: #F8FAFC;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--sky-blue);
            background: white;
        }

        .auth-submit {
            width: 100%;
            padding: 14px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }

        .auth-submit:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }

        .auth-submit:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .alert {
            padding: 12px;
            border-radius: 10px;
            margin-bottom: 20px;
            animation: slideDown 0.3s;
        }

        @keyframes slideDown {
            from {
                transform: translateY(-20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .alert-error {
            background: #FEE2E2;
            color: #991B1B;
            border: 1px solid #FECACA;
        }

        .alert-success {
            background: #D1FAE5;
            color: #065F46;
            border: 1px solid #A7F3D0;
        }

        .alert-info {
            background: #DBEAFE;
            color: #1E3A8A;
            border: 1px solid #BFDBFE;
        }

        /* Application principale */
        .app-container {
            display: none;
            min-height: 100vh;
        }

        .app-container.authenticated {
            display: block;
        }

        .auth-container.hidden {
            display: none;
        }

        .header {
            background: white;
            padding: 20px 30px;
            box-shadow: 0 2px 10px var(--shadow);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-title {
            font-size: 24px;
            font-weight: 600;
            color: var(--navy);
        }

        .header-user {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-info {
            text-align: right;
        }

        .user-name {
            font-weight: 600;
            color: var(--navy);
        }

        .user-role {
            font-size: 12px;
            color: #64748B;
        }

        .logout-btn {
            padding: 10px 20px;
            background: var(--danger);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .logout-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(220, 38, 38, 0.3);
        }

        .nav-menu {
            background: white;
            padding: 20px 30px;
            box-shadow: 0 2px 10px var(--shadow);
            display: flex;
            gap: 20px;
            margin-top: 2px;
        }

        .nav-item {
            padding: 10px 20px;
            background: transparent;
            border: 2px solid transparent;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 500;
            color: #64748B;
        }

        .nav-item.active {
            background: var(--primary);
            color: white;
        }

        .nav-item:hover:not(.active) {
            background: #F1F5F9;
        }

        .content {
            padding: 30px;
        }

        .section {
            display: none;
            animation: fadeIn 0.5s;
        }

        .section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px var(--shadow);
            transition: all 0.3s;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px var(--shadow);
        }

        .stat-value {
            font-size: 36px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #64748B;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .actions-table {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px var(--shadow);
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .add-btn {
            padding: 10px 20px;
            background: var(--success);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 600;
        }

        .add-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(5, 150, 105, 0.3);
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            text-align: left;
            padding: 12px;
            background: #F8FAFC;
            font-weight: 600;
            color: #64748B;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        td {
            padding: 12px;
            border-top: 1px solid #E2E8F0;
        }

        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-nouveau {
            background: #DBEAFE;
            color: #1E3A8A;
        }

        .status-en-cours {
            background: #FEF3C7;
            color: #92400E;
        }

        .status-termine {
            background: #D1FAE5;
            color: #065F46;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .btn-small {
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s;
        }

        .btn-edit {
            background: #60A5FA;
            color: white;
        }

        .btn-delete {
            background: #F87171;
            color: white;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 20px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-title {
            font-size: 24px;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #64748B;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <!-- Écran de connexion -->
    <div class="auth-container" id="authContainer">
        <div class="auth-box">
            <div class="auth-header">
                <div class="auth-logo">🏛️</div>
                <h1 class="auth-title">SGG</h1>
                <p style="color: #64748B; margin-top: 10px;">Secrétariat Général du Gouvernement</p>
            </div>

            <div id="alertContainer"></div>

            <div class="auth-tabs">
                <button class="auth-tab active" onclick="switchTab('login')">Connexion</button>
                <button class="auth-tab" onclick="switchTab('signup')">Inscription</button>
            </div>

            <!-- Formulaire de connexion -->
            <div id="loginForm">
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" id="loginEmail" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Mot de passe</label>
                    <input type="password" class="form-input" id="loginPassword" required>
                </div>
                <button type="submit" class="auth-submit" id="loginBtn">
                    Se connecter
                </button>
            </div>

            <!-- Formulaire d'inscription -->
            <div id="signupForm">
                <div class="form-group">
                    <label class="form-label">Nom complet</label>
                    <input type="text" class="form-input" id="signupName" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" id="signupEmail" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Ministère</label>
                    <select class="form-input" id="signupMinistry" required>
                        <option value="">Sélectionner un ministère</option>
                        <option value="Intérieur">Ministère de l'Intérieur</option>
                        <option value="Économie">Ministère de l'Économie</option>
                        <option value="Santé">Ministère de la Santé</option>
                        <option value="Éducation">Ministère de l'Éducation</option>
                        <option value="Justice">Ministère de la Justice</option>
                        <option value="Transport">Ministère des Transports</option>
                        <option value="Agriculture">Ministère de l'Agriculture</option>
                        <option value="Environnement">Ministère de l'Environnement</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Mot de passe (min. 8 caractères)</label>
                    <input type="password" class="form-input" id="signupPassword" required minlength="8">
                </div>
                <button type="submit" class="auth-submit" id="signupBtn">
                    S'inscrire
                </button>
            </div>
        </div>
    </div>

    <!-- Application principale -->
    <div class="app-container" id="appContainer">
        <header class="header">
            <h1 class="header-title">🏛️ SGG - Système de Gestion</h1>
            <div class="header-user">
                <div class="user-info">
                    <div class="user-name" id="userName">-</div>
                    <div class="user-role" id="userRole">-</div>
                </div>
                <button class="logout-btn" onclick="logout()">Déconnexion</button>
            </div>
        </header>

        <nav class="nav-menu">
            <button class="nav-item active" onclick="showSection('dashboard')">📊 Dashboard</button>
            <button class="nav-item" onclick="showSection('actions')">📋 Actions</button>
            <button class="nav-item" onclick="showSection('teams')">👥 Équipe</button>
        </nav>

        <div class="content">
            <!-- Dashboard -->
            <section class="section active" id="dashboard">
                <h2 style="margin-bottom: 20px;">Tableau de bord</h2>
                <div class="stats-grid" id="statsGrid">
                    <div class="stat-card">
                        <div class="stat-value" id="statTotal">0</div>
                        <div class="stat-label">Total Actions</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="statCompleted">0</div>
                        <div class="stat-label">Terminées</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="statInProgress">0</div>
                        <div class="stat-label">En Cours</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="statOverdue">0</div>
                        <div class="stat-label">En Retard</div>
                    </div>
                </div>
            </section>

            <!-- Actions -->
            <section class="section" id="actions">
                <div class="actions-table">
                    <div class="table-header">
                        <h2>Gestion des Actions</h2>
                        <button class="add-btn" onclick="openActionModal()">+ Nouvelle Action</button>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Ministère</th>
                                <th>Action</th>
                                <th>Responsable</th>
                                <th>Statut</th>
                                <th>Date Fin</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="actionsTableBody">
                            <tr>
                                <td colspan="7" style="text-align: center; padding: 40px; color: #64748B;">
                                    Chargement des actions...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </section>

            <!-- Équipe -->
            <section class="section" id="teams">
                <div class="actions-table">
                    <div class="table-header">
                        <h2>Gestion de l'Équipe</h2>
                        <button class="add-btn" onclick="openTeamModal()">+ Nouveau Membre</button>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>Nom</th>
                                <th>Position</th>
                                <th>Ministère</th>
                                <th>Email</th>
                                <th>Téléphone</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="teamsTableBody">
                            <tr>
                                <td colspan="6" style="text-align: center; padding: 40px; color: #64748B;">
                                    Chargement de l'équipe...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </section>
        </div>
    </div>

    <!-- Modal Action -->
    <div class="modal" id="actionModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Nouvelle Action</h2>
                <button class="close-btn" onclick="closeModal('actionModal')">×</button>
            </div>
            <form id="actionForm">
                <div class="form-group">
                    <label class="form-label">Ministère</label>
                    <select class="form-input" id="actionMinistry" required>
                        <option value="">Sélectionner un ministère</option>
                        <option value="Intérieur">Ministère de l'Intérieur</option>
                        <option value="Économie">Ministère de l'Économie</option>
                        <option value="Santé">Ministère de la Santé</option>
                        <option value="Éducation">Ministère de l'Éducation</option>
                        <option value="Justice">Ministère de la Justice</option>
                        <option value="Transport">Ministère des Transports</option>
                        <option value="Agriculture">Ministère de l'Agriculture</option>
                        <option value="Environnement">Ministère de l'Environnement</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Titre de l'action</label>
                    <input type="text" class="form-input" id="actionTitle" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea class="form-input" id="actionDescription" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Responsable</label>
                    <input type="text" class="form-input" id="actionResponsible" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Priorité</label>
                    <select class="form-input" id="actionPriority" required>
                        <option value="basse">Basse</option>
                        <option value="moyenne">Moyenne</option>
                        <option value="haute">Haute</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Date de début</label>
                    <input type="date" class="form-input" id="actionStartDate" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Date de fin</label>
                    <input type="date" class="form-input" id="actionEndDate" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Statut</label>
                    <select class="form-input" id="actionStatus" required>
                        <option value="nouveau">Nouveau</option>
                        <option value="en-cours">En Cours</option>
                        <option value="termine">Terminé</option>
                    </select>
                </div>
                <button type="submit" class="auth-submit">Enregistrer</button>
            </div>
        </div>
    </div>

    <!-- Modal Équipe -->
    <div class="modal" id="teamModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Nouveau Membre</h2>
                <button class="close-btn" onclick="closeModal('teamModal')">×</button>
            </div>
            <form id="teamForm">
                <div class="form-group">
                    <label class="form-label">Nom complet</label>
                    <input type="text" class="form-input" id="teamName" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Position</label>
                    <input type="text" class="form-input" id="teamPosition" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Ministère</label>
                    <select class="form-input" id="teamMinistry" required>
                        <option value="">Sélectionner un ministère</option>
                        <option value="Intérieur">Ministère de l'Intérieur</option>
                        <option value="Économie">Ministère de l'Économie</option>
                        <option value="Santé">Ministère de la Santé</option>
                        <option value="Éducation">Ministère de l'Éducation</option>
                        <option value="Justice">Ministère de la Justice</option>
                        <option value="Transport">Ministère des Transports</option>
                        <option value="Agriculture">Ministère de l'Agriculture</option>
                        <option value="Environnement">Ministère de l'Environnement</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" id="teamEmail" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Téléphone</label>
                    <input type="tel" class="form-input" id="teamPhone">
                </div>
                <div class="form-group">
                    <label class="form-label">Notes</label>
                    <textarea class="form-input" id="teamNotes" rows="3"></textarea>
                </div>
                <button type="submit" class="auth-submit">Enregistrer</button>
            </div>
        </div>
    </div>

    <script>
        // Configuration API
        const API_URL = 'http://alcamar.org/api';
        let authToken = localStorage.getItem('sgg_token');
        let currentUser = JSON.parse(localStorage.getItem('sgg_user') || '{}');

        // Vérifier l'authentification au chargement
        document.addEventListener('DOMContentLoaded', () => {
            if (authToken) {
                testConnection();
            }
        });

        // Tester la connexion API
        async function testConnection() {
            try {
                const response = await fetch(`${API_URL}/test`);
                const data = await response.json();
                
                if (response.ok) {
                    showAlert('✅ Connexion API établie', 'success');
                    if (authToken) {
                        showApplication();
                        loadDashboard();
                    }
                }
            } catch (error) {
                showAlert('⚠️ Serveur non disponible. Vérifiez que le backend est démarré sur le port 3000', 'error');
                console.error('Erreur de connexion:', error);
            }
        }

        // Basculer entre login et signup
        function switchTab(tab) {
            const tabs = document.querySelectorAll('.auth-tab');
            const loginForm = document.getElementById('loginForm');
            const signupForm = document.getElementById('signupForm');
            
            tabs.forEach(t => t.classList.remove('active'));
            
            if (tab === 'login') {
                tabs[0].classList.add('active');
                loginForm.style.display = 'block';
                signupForm.style.display = 'none';
            } else {
                tabs[1].classList.add('active');
                loginForm.style.display = 'none';
                signupForm.style.display = 'block';
            }
        }

        // Gérer la connexion
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            const button = document.getElementById('loginBtn');
            
            button.disabled = true;
            button.innerHTML = '<span class="loading"></span> Connexion...';
            
            try {
                const response = await fetch(`${API_URL}/auth/login`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email, password })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    authToken = data.token;
                    currentUser = data.user;
                    
                    localStorage.setItem('sgg_token', authToken);
                    localStorage.setItem('sgg_user', JSON.stringify(currentUser));
                    
                    showAlert('Connexion réussie!', 'success');
                    showApplication();
                    loadDashboard();
                } else {
                    showAlert(data.error || 'Erreur de connexion', 'error');
                }
            } catch (error) {
                showAlert('Erreur de connexion au serveur', 'error');
                console.error('Erreur:', error);
            } finally {
                button.disabled = false;
                button.textContent = 'Se connecter';
            }
        });

        // Gérer l'inscription
        document.getElementById('signupForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const name = document.getElementById('signupName').value;
            const email = document.getElementById('signupEmail').value;
            const ministry = document.getElementById('signupMinistry').value;
            const password = document.getElementById('signupPassword').value;
            const button = document.getElementById('signupBtn');
            
            button.disabled = true;
            button.innerHTML = '<span class="loading"></span> Inscription...';
            
            try {
                const response = await fetch(`${API_URL}/auth/signup`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name, email, password, ministry })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showAlert('Compte créé avec succès! Vous pouvez maintenant vous connecter.', 'success');
                    switchTab('login');
                    document.getElementById('loginEmail').value = email;
                } else {
                    showAlert(data.error || 'Erreur lors de l\'inscription', 'error');
                }
            } catch (error) {
                showAlert('Erreur de connexion au serveur', 'error');
                console.error('Erreur:', error);
            } finally {
                button.disabled = false;
                button.textContent = 'S\'inscrire';
            }
        });

        // Afficher l'application
        function showApplication() {
            document.getElementById('authContainer').classList.add('hidden');
            document.getElementById('appContainer').classList.add('authenticated');
            
            document.getElementById('userName').textContent = currentUser.name || 'Utilisateur';
            document.getElementById('userRole').textContent = currentUser.ministry || 'Non défini';
        }

        // Déconnexion
        function logout() {
            if (confirm('Voulez-vous vraiment vous déconnecter?')) {
                localStorage.removeItem('sgg_token');
                localStorage.removeItem('sgg_user');
                authToken = null;
                currentUser = {};
                
                document.getElementById('authContainer').classList.remove('hidden');
                document.getElementById('appContainer').classList.remove('authenticated');
                
                showAlert('Déconnexion réussie', 'success');
            }
        }

        // Charger le dashboard
        async function loadDashboard() {
            try {
                const response = await fetch(`${API_URL}/actions/stats`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const stats = await response.json();
                    document.getElementById('statTotal').textContent = stats.total || 0;
                    document.getElementById('statCompleted').textContent = stats.completed || 0;
                    document.getElementById('statInProgress').textContent = stats.in_progress || 0;
                    document.getElementById('statOverdue').textContent = stats.overdue || 0;
                }
            } catch (error) {
                console.error('Erreur chargement stats:', error);
            }
            
            loadActions();
            loadTeams();
        }

        // Charger les actions
        async function loadActions() {
            try {
                const response = await fetch(`${API_URL}/actions`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const actions = await response.json();
                    const tbody = document.getElementById('actionsTableBody');
                    
                    if (actions.length === 0) {
                        tbody.innerHTML = '<tr><td colspan="7" style="text-align: center; padding: 40px; color: #64748B;">Aucune action trouvée</td></tr>';
                    } else {
                        tbody.innerHTML = actions.map(action => `
                            <tr>
                                <td>${action.id}</td>
                                <td>${action.ministry}</td>
                                <td>${action.action_title}</td>
                                <td>${action.responsible}</td>
                                <td><span class="status-badge status-${action.status}">${action.status}</span></td>
                                <td>${new Date(action.end_date).toLocaleDateString('fr-FR')}</td>
                                <td class="action-buttons">
                                    <button class="btn-small btn-edit" onclick="editAction(${action.id})">Modifier</button>
                                    <button class="btn-small btn-delete" onclick="deleteAction(${action.id})">Supprimer</button>
                                </td>
                            </tr>
                        `).join('');
                    }
                }
            } catch (error) {
                console.error('Erreur chargement actions:', error);
            }
        }

        // Charger l'équipe
        async function loadTeams() {
            try {
                const response = await fetch(`${API_URL}/teams`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const teams = await response.json();
                    const tbody = document.getElementById('teamsTableBody');
                    
                    if (teams.length === 0) {
                        tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; padding: 40px; color: #64748B;">Aucun membre trouvé</td></tr>';
                    } else {
                        tbody.innerHTML = teams.map(member => `
                            <tr>
                                <td>${member.name}</td>
                                <td>${member.position || '-'}</td>
                                <td>${member.ministry || '-'}</td>
                                <td>${member.email || '-'}</td>
                                <td>${member.phone || '-'}</td>
                                <td class="action-buttons">
                                    <button class="btn-small btn-delete" onclick="deleteTeamMember(${member.id})">Supprimer</button>
                                </td>
                            </tr>
                        `).join('');
                    }
                }
            } catch (error) {
                console.error('Erreur chargement équipe:', error);
            }
        }

        // Ajouter une action
        document.getElementById('actionForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const actionData = {
                ministry: document.getElementById('actionMinistry').value,
                action_title: document.getElementById('actionTitle').value,
                description: document.getElementById('actionDescription').value,
                responsible: document.getElementById('actionResponsible').value,
                priority: document.getElementById('actionPriority').value,
                start_date: document.getElementById('actionStartDate').value,
                end_date: document.getElementById('actionEndDate').value,
                status: document.getElementById('actionStatus').value,
                stakeholders: []
            };
            
            try {
                const response = await fetch(`${API_URL}/actions`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify(actionData)
                });
                
                if (response.ok) {
                    showAlert('Action créée avec succès!', 'success');
                    closeModal('actionModal');
                    loadActions();
                    loadDashboard();
                } else {
                    const data = await response.json();
                    showAlert(data.error || 'Erreur lors de la création', 'error');
                }
            } catch (error) {
                showAlert('Erreur de connexion au serveur', 'error');
                console.error('Erreur:', error);
            }
        });

        // Ajouter un membre d'équipe
        document.getElementById('teamForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const teamData = {
                name: document.getElementById('teamName').value,
                position: document.getElementById('teamPosition').value,
                ministry: document.getElementById('teamMinistry').value,
                email: document.getElementById('teamEmail').value,
                phone: document.getElementById('teamPhone').value,
                notes: document.getElementById('teamNotes').value
            };
            
            try {
                const response = await fetch(`${API_URL}/teams`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify(teamData)
                });
                
                if (response.ok) {
                    showAlert('Membre ajouté avec succès!', 'success');
                    closeModal('teamModal');
                    loadTeams();
                } else {
                    const data = await response.json();
                    showAlert(data.error || 'Erreur lors de l\'ajout', 'error');
                }
            } catch (error) {
                showAlert('Erreur de connexion au serveur', 'error');
                console.error('Erreur:', error);
            }
        });

        // Supprimer une action
        async function deleteAction(id) {
            if (!confirm('Êtes-vous sûr de vouloir supprimer cette action?')) return;
            
            try {
                const response = await fetch(`${API_URL}/actions/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    showAlert('Action supprimée avec succès!', 'success');
                    loadActions();
                    loadDashboard();
                } else {
                    showAlert('Erreur lors de la suppression', 'error');
                }
            } catch (error) {
                showAlert('Erreur de connexion au serveur', 'error');
                console.error('Erreur:', error);
            }
        }

        // Supprimer un membre d'équipe
        async function deleteTeamMember(id) {
            if (!confirm('Êtes-vous sûr de vouloir supprimer ce membre?')) return;
            
            try {
                const response = await fetch(`${API_URL}/teams/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    showAlert('Membre supprimé avec succès!', 'success');
                    loadTeams();
                } else {
                    showAlert('Erreur lors de la suppression', 'error');
                }
            } catch (error) {
                showAlert('Erreur de connexion au serveur', 'error');
                console.error('Erreur:', error);
            }
        }

        // Modifier une action (TODO: implémenter)
        function editAction(id) {
            showAlert('Fonction de modification en cours de développement', 'info');
        }

        // Ouvrir les modals
        function openActionModal() {
            document.getElementById('actionModal').classList.add('active');
            document.getElementById('actionForm').reset();
        }

        function openTeamModal() {
            document.getElementById('teamModal').classList.add('active');
            document.getElementById('teamForm').reset();
        }

        // Fermer un modal
        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }

        // Afficher les sections
        function showSection(sectionName) {
            // Masquer toutes les sections
            document.querySelectorAll('.section').forEach(section => {
                section.classList.remove('active');
            });
            
            // Afficher la section sélectionnée
            document.getElementById(sectionName).classList.add('active');
            
            // Mettre à jour la navigation
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Recharger les données si nécessaire
            if (sectionName === 'actions') {
                loadActions();
            } else if (sectionName === 'teams') {
                loadTeams();
            } else if (sectionName === 'dashboard') {
                loadDashboard();
            }
        }

        // Afficher les alertes
        function showAlert(message, type = 'info') {
            const alertContainer = document.getElementById('alertContainer');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            
            alertContainer.innerHTML = '';
            alertContainer.appendChild(alert);
            
            setTimeout(() => {
                alert.style.opacity = '0';
                setTimeout(() => {
                    if (alert.parentNode) {
                        alert.parentNode.removeChild(alert);
                    }
                }, 300);
            }, 5000);
        }

        // Fermer les modals avec Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                document.querySelectorAll('.modal').forEach(modal => {
                    modal.classList.remove('active');
                });
            }
        });

        // Fermer les modals en cliquant en dehors
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('active');
                }
            });
        });
