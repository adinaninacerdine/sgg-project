<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SGG - Système de Gestion des Actions Ministérielles V13</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: linear-gradient(135deg, #1E3A8A 0%, #3B82F6 100%);
            --secondary: linear-gradient(135deg, #065F46 0%, #10B981 100%);
            --success: linear-gradient(135deg, #059669 0%, #34D399 100%);
            --danger: linear-gradient(135deg, #DC2626 0%, #F87171 100%);
            --warning: linear-gradient(135deg, #D97706 0%, #FCD34D 100%);
            --info: linear-gradient(135deg, #0EA5E9 0%, #7DD3FC 100%);
            --dark: #0F172A;
            --light: #F0F9FF;
            --bg: #F8FAFC;
            --text: #1E293B;
            --sidebar-width: 260px;
            --header-height: 70px;
            --navy: #1E3A8A;
            --sky-blue: #3B82F6;
            --teal: #14B8A6;
            --emerald: #10B981;
            --aqua: #E0F2FE;
            --shadow: rgba(30, 58, 138, 0.1);
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(180deg, var(--bg) 0%, #E0F2FE 100%);
            color: var(--text);
            min-height: 100vh;
        }

        /* Application */
        .app-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: var(--sidebar-width);
            background: linear-gradient(180deg, var(--navy) 0%, var(--teal) 100%);
            color: white;
            position: fixed;
            height: 100vh;
            left: 0;
            top: 0;
            z-index: 1000;
            overflow-y: auto;
            box-shadow: 4px 0 20px var(--shadow);
            transition: all 0.3s;
        }

        .sidebar.collapsed {
            width: 70px;
        }

        .sidebar-header {
            padding: 25px 20px;
            background: rgba(255,255,255,0.1);
            border-bottom: 1px solid rgba(255,255,255,0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .logo {
            font-size: 24px;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .logo-icon {
            width: 40px;
            height: 40px;
            background: white;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: var(--navy);
        }

        .nav-menu {
            padding: 20px 0;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            color: white;
            text-decoration: none;
            transition: all 0.3s;
            cursor: pointer;
            position: relative;
        }

        .nav-item:hover {
            background: rgba(255,255,255,0.1);
            padding-left: 25px;
        }

        .nav-item.active {
            background: rgba(255,255,255,0.2);
            border-left: 4px solid white;
        }

        .nav-icon {
            font-size: 20px;
            margin-right: 15px;
            min-width: 20px;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            min-height: 100vh;
            transition: all 0.3s;
        }

        .sidebar.collapsed ~ .main-content {
            margin-left: 70px;
        }

        /* Header */
        .header {
            background: white;
            height: var(--header-height);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 30px;
            box-shadow: 0 2px 20px var(--shadow);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-title {
            font-size: 28px;
            font-weight: 600;
            background: var(--primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .header-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        #userInfo {
            padding: 8px 15px;
            background: var(--bg);
            border-radius: 10px;
            color: var(--navy);
            font-weight: 500;
        }

        /* Sections */
        .section {
            display: none;
            padding: 30px;
            animation: fadeIn 0.5s;
        }

        .section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Stats */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px var(--shadow);
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
        }

        .stat-card.primary::before { background: var(--primary); }
        .stat-card.success::before { background: var(--success); }
        .stat-card.warning::before { background: var(--warning); }
        .stat-card.danger::before { background: var(--danger); }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            color: white;
            margin-bottom: 15px;
        }

        .stat-icon.primary { background: var(--primary); }
        .stat-icon.success { background: var(--success); }
        .stat-icon.warning { background: var(--warning); }
        .stat-icon.danger { background: var(--danger); }

        .stat-value {
            font-size: 36px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #95a5a6;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        /* Table */
        .table-container {
            background: white;
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.05);
            overflow-x: auto;
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .search-box {
            display: flex;
            align-items: center;
            background: var(--bg);
            border-radius: 10px;
            padding: 10px 15px;
            gap: 10px;
            flex: 1;
            max-width: 400px;
        }

        .search-box input {
            border: none;
            background: none;
            outline: none;
            flex: 1;
            color: var(--text);
        }

        .filter-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 2px solid transparent;
            background: var(--bg);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 500;
        }

        .filter-btn.active {
            background: var(--primary);
            color: white;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            text-align: left;
            padding: 15px;
            background: var(--bg);
            font-weight: 600;
            text-transform: uppercase;
            font-size: 12px;
            letter-spacing: 1px;
            color: #7f8c8d;
        }

        td {
            padding: 15px;
            border-bottom: 1px solid var(--bg);
        }

        tr:hover {
            background: var(--bg);
        }

        /* Status Badge */
        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            display: inline-block;
            text-transform: uppercase;
        }

        .status-badge.nouveau {
            background: #DBEAFE;
            color: #1E3A8A;
            border: 1px solid #3B82F6;
        }

        .status-badge.en-cours {
            background: #FEF3C7;
            color: #92400E;
            border: 1px solid #F59E0B;
        }

        .status-badge.termine {
            background: #D1FAE5;
            color: #065F46;
            border: 1px solid #10B981;
        }

        .status-badge.en-retard {
            background: #FEE2E2;
            color: #991B1B;
            border: 1px solid #EF4444;
        }

        /* Buttons */
        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
            font-size: 15px;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-success {
            background: var(--success);
            color: white;
        }

        .btn-secondary {
            background: var(--bg);
            color: var(--text);
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .btn-icon {
            width: 35px;
            height: 35px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
        }

        .btn-icon.edit {
            background: rgba(52, 152, 219, 0.1);
            color: #3498db;
        }

        .btn-icon.delete {
            background: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
        }

        .btn-icon:hover {
            transform: scale(1.1);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 2000;
            align-items: center;
            justify-content: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 20px;
            padding: 30px;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideUp 0.3s;
        }

        @keyframes slideUp {
            from { transform: translateY(50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .modal-title {
            font-size: 24px;
            font-weight: 600;
        }

        .close-modal {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            border: none;
            background: var(--bg);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            transition: all 0.3s;
        }

        .close-modal:hover {
            background: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
            transform: rotate(90deg);
        }

        /* Forms */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #7f8c8d;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .form-input,
        .form-select,
        .form-textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid var(--bg);
            border-radius: 10px;
            background: var(--bg);
            color: var(--text);
            transition: all 0.3s;
            font-size: 15px;
        }

        .form-input:focus,
        .form-select:focus,
        .form-textarea:focus {
            border-color: var(--sky-blue);
            outline: none;
        }

        .form-textarea {
            resize: vertical;
            min-height: 100px;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .form-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 25px;
        }

        /* FAB */
        .fab {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--primary);
            color: white;
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
            transition: all 0.3s;
            z-index: 100;
        }

        .fab:hover {
            transform: scale(1.1) rotate(90deg);
            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4);
        }

        /* Alert */
        .alert {
            position: fixed;
            top: 90px;
            right: 30px;
            padding: 15px 20px;
            border-radius: 10px;
            color: white;
            font-weight: 500;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            animation: slideInRight 0.3s ease;
            z-index: 3000;
        }

        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .alert.success { background: var(--success); }
        .alert.error { background: var(--danger); }
        .alert.warning { background: var(--warning); }
        .alert.info { background: var(--info); }

        /* Progress Bar */
        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--bg);
            border-radius: 10px;
            overflow: hidden;
            margin-top: 10px;
        }

        .progress-fill {
            height: 100%;
            background: var(--success);
            border-radius: 10px;
            transition: width 0.5s ease;
        }

        /* Configuration Section */
        .config-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 2px solid var(--bg);
        }

        .config-tab {
            padding: 10px 20px;
            background: none;
            border: none;
            cursor: pointer;
            font-weight: 500;
            color: #7f8c8d;
            transition: all 0.3s;
            border-bottom: 3px solid transparent;
            margin-bottom: -2px;
        }

        .config-tab.active {
            color: var(--navy);
            border-bottom-color: var(--sky-blue);
        }

        .config-section {
            display: none;
        }

        .config-section.active {
            display: block;
        }

        .ministry-item,
        .team-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: var(--bg);
            margin: 5px 0;
            border-radius: 10px;
        }

        /* Canvas for Charts */
        canvas {
            max-width: 100%;
            height: 300px;
        }

        /* File Upload */
        .file-upload-area {
            border: 2px dashed var(--sky-blue);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            background: var(--bg);
            cursor: pointer;
            transition: all 0.3s;
        }

        .file-upload-area:hover {
            background: white;
            border-color: var(--navy);
        }

        .file-list {
            margin-top: 10px;
        }

        .file-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px;
            background: white;
            border-radius: 5px;
            margin-top: 5px;
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }

            .sidebar.active {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .mobile-menu-toggle {
                display: block;
                position: fixed;
                top: 20px;
                left: 20px;
                z-index: 1001;
                background: var(--primary);
                color: white;
                border: none;
                padding: 10px;
                border-radius: 10px;
                cursor: pointer;
            }
        }

        .mobile-menu-toggle {
            display: none;
        }

        /* Print Styles */
        @media print {
            .sidebar,
            .header-actions,
            .fab {
                display: none !important;
            }

            .main-content {
                margin-left: 0 !important;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Mobile Menu Toggle -->
        <button class="mobile-menu-toggle" onclick="toggleMobileSidebar()">☰</button>

        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <div class="logo">
                    <div class="logo-icon">🏛️</div>
                    <span class="logo-text">SGG</span>
                </div>
                <button class="close-modal" onclick="toggleSidebar()" style="background: rgba(255,255,255,0.1);">☰</button>
            </div>

            <nav class="nav-menu">
                <a class="nav-item active" onclick="showSection('dashboard')">
                    <span class="nav-icon">📊</span>
                    <span class="nav-text">Dashboard</span>
                </a>
                <a class="nav-item" onclick="showSection('gestion')">
                    <span class="nav-icon">📋</span>
                    <span class="nav-text">Gestion</span>
                </a>
                <a class="nav-item" onclick="showSection('equipe')">
                    <span class="nav-icon">👥</span>
                    <span class="nav-text">Équipe</span>
                </a>
                <a class="nav-item" onclick="showSection('ministeres')">
                    <span class="nav-icon">🏢</span>
                    <span class="nav-text">Ministères</span>
                </a>
                <a class="nav-item" onclick="showSection('rapports')">
                    <span class="nav-icon">📈</span>
                    <span class="nav-text">Rapports</span>
                </a>
                <a class="nav-item" onclick="showSection('config')">
                    <span class="nav-icon">⚙️</span>
                    <span class="nav-text">Configuration</span>
                </a>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Header -->
            <header class="header">
                <h1 class="header-title">Système de Gestion des Actions Ministérielles</h1>
                <div class="header-actions">
                    <span id="userInfo"></span>
                    <button class="btn btn-secondary" onclick="logout()">🚪 Déconnexion</button>
                </div>
            </header>

            <!-- Dashboard Section -->
            <section class="section active" id="dashboard">
                <div class="stats-grid">
                    <div class="stat-card primary" onclick="filterAndShowActions('all')" style="cursor: pointer;">
                        <div class="stat-icon primary">📊</div>
                        <div class="stat-value" id="totalActions">0</div>
                        <div class="stat-label">Total Actions</div>
                    </div>
                    <div class="stat-card success" onclick="filterAndShowActions('termine')" style="cursor: pointer;">
                        <div class="stat-icon success">✅</div>
                        <div class="stat-value" id="completedActions">0</div>
                        <div class="stat-label">Terminées</div>
                    </div>
                    <div class="stat-card warning" onclick="filterAndShowActions('en-cours')" style="cursor: pointer;">
                        <div class="stat-icon warning">⏳</div>
                        <div class="stat-value" id="inProgressActions">0</div>
                        <div class="stat-label">En Cours</div>
                    </div>
                    <div class="stat-card danger" onclick="filterAndShowActions('en-retard')" style="cursor: pointer;">
                        <div class="stat-icon danger">⚠️</div>
                        <div class="stat-value" id="overdueActions">0</div>
                        <div class="stat-label">En Retard</div>
                    </div>
                </div>

                <div class="table-container">
                    <h3>Actions Récentes</h3>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Ministère</th>
                                <th>Action</th>
                                <th>Responsable</th>
                                <th>Statut</th>
                                <th>Date Fin</th>
                            </tr>
                        </thead>
                        <tbody id="recentActionsTable"></tbody>
                    </table>
                </div>

                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 25px; margin-top: 30px;">
                    <div class="table-container">
                        <h3>Évolution des Actions</h3>
                        <canvas id="evolutionChart"></canvas>
                    </div>
                    <div class="table-container">
                        <h3>Répartition par Statut</h3>
                        <canvas id="statusChart"></canvas>
                    </div>
                </div>
            </section>

            <!-- Gestion Section -->
            <section class="section" id="gestion">
                <div class="table-container">
                    <div class="table-header">
                        <div class="search-box">
                            <span>🔍</span>
                            <input type="text" placeholder="Rechercher..." id="searchInput" onkeyup="filterActions()">
                        </div>
                        <div class="filter-buttons">
                            <button class="filter-btn active" onclick="filterByStatus('all')">Tous</button>
                            <button class="filter-btn" onclick="filterByStatus('nouveau')">Nouveau</button>
                            <button class="filter-btn" onclick="filterByStatus('en-cours')">En Cours</button>
                            <button class="filter-btn" onclick="filterByStatus('termine')">Terminé</button>
                            <button class="filter-btn" onclick="filterByStatus('en-retard')">En Retard</button>
                        </div>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Ministère</th>
                                <th>Action</th>
                                <th>Responsable</th>
                                <th>Priorité</th>
                                <th>Date Début</th>
                                <th>Date Fin</th>
                                <th>Statut</th>
                                <th>Observations</th>
                                <th>Dossier</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="actionsTableBody"></tbody>
                    </table>
                </div>
            </section>

            <!-- Équipe Section -->
            <section class="section" id="equipe">
                <div class="table-container">
                    <div class="table-header">
                        <h2>Gestion de l'Équipe</h2>
                        <button class="btn btn-primary" onclick="openTeamModal()">+ Nouveau Membre</button>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>Nom</th>
                                <th>Poste</th>
                                <th>Ministère</th>
                                <th>Email</th>
                                <th>Téléphone</th>
                                <th>Actions Assignées</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="teamTableBody"></tbody>
                    </table>
                </div>
            </section>

            <!-- Ministères Section -->
            <section class="section" id="ministeres">
                <div class="table-container">
                    <div class="table-header">
                        <h2>Gestion des Ministères</h2>
                        <button class="btn btn-primary" onclick="openMinistryModal()">+ Nouveau Ministère</button>
                    </div>
                    <div id="ministryList" style="margin-top: 20px;"></div>
                </div>
            </section>

            <!-- Rapports Section -->
            <section class="section" id="rapports">
                <div class="table-container">
                    <h2>Génération de Rapports</h2>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 30px;">
                        <div class="stat-card">
                            <h3>Rapport Mensuel</h3>
                            <p>Générer un rapport détaillé des actions du mois</p>
                            <button class="btn btn-primary" onclick="generateMonthlyReport()">Générer PDF</button>
                        </div>
                        <div class="stat-card">
                            <h3>Rapport par Ministère</h3>
                            <p>Analyse détaillée par ministère</p>
                            <button class="btn btn-primary" onclick="generateMinistryReport()">Générer PDF</button>
                        </div>
                        <div class="stat-card">
                            <h3>Rapport de Performance</h3>
                            <p>Indicateurs de performance globaux</p>
                            <button class="btn btn-primary" onclick="generatePerformanceReport()">Générer PDF</button>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Configuration Section -->
            <section class="section" id="config">
                <div class="table-container">
                    <h2>Configuration du Système</h2>
                    
                    <div class="config-tabs">
                        <button class="config-tab active" onclick="showConfigTab('general')">Général</button>
                        <button class="config-tab" onclick="showConfigTab('notifications')">Notifications</button>
                        <button class="config-tab" onclick="showConfigTab('backup')">Sauvegarde</button>
                        <button class="config-tab" onclick="showConfigTab('import')">Import/Export</button>
                    </div>

                    <div id="config-general" class="config-section active">
                        <h3>Paramètres Généraux</h3>
                        <div class="form-group">
                            <label class="form-label">Nom de l'Organisation</label>
                            <input type="text" class="form-input" id="orgName" value="Secrétariat Général du Gouvernement">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Email de Contact</label>
                            <input type="email" class="form-input" id="orgEmail" value="contact@sgg.km">
                        </div>
                        <button class="btn btn-primary" onclick="saveGeneralSettings()">Enregistrer</button>
                    </div>

                    <div id="config-notifications" class="config-section">
                        <h3>Paramètres de Notifications</h3>
                        <label><input type="checkbox" id="notifyOverdue" checked> Alerter pour les actions en retard</label><br>
                        <label><input type="checkbox" id="notifyDeadline" checked> Alerter 3 jours avant l'échéance</label><br>
                        <label><input type="checkbox" id="notifyNew" checked> Alerter pour les nouvelles actions</label><br>
                        <button class="btn btn-primary" onclick="saveNotificationSettings()">Enregistrer</button>
                    </div>

                    <div id="config-backup" class="config-section">
                        <h3>Sauvegarde et Restauration</h3>
                        <button class="btn btn-primary" onclick="backupData()">💾 Créer une Sauvegarde</button>
                        <button class="btn btn-secondary" onclick="restoreData()">📥 Restaurer depuis un fichier</button>
                        <button class="btn btn-danger" onclick="resetData()">⚠️ Réinitialiser tout</button>
                    </div>

                    <div id="config-import" class="config-section">
                        <h3>Import/Export de Données</h3>
                        <div class="form-group">
                            <label class="form-label">Importer depuis CSV</label>
                            <input type="file" accept=".csv" onchange="importCSV(event)">
                        </div>
                        <button class="btn btn-success" onclick="exportToCSV()">📊 Export CSV</button>
                        <button class="btn btn-success" onclick="exportToExcel()">📑 Export Excel</button>
                        <button class="btn btn-success" onclick="exportToPDF()">📄 Export PDF</button>
                    </div>
                </div>
            </section>

	    <!-- Section Administration (Admin seulement) -->
	    <section class="section" id="administration">
    		<div class="table-container">
        		<h2>Administration des Utilisateurs</h2>
        
        		<div class="stats-grid" style="margin: 20px 0;">
            			<div class="stat-card">
                			<div class="stat-value" id="totalUsers">0</div>
                			<div class="stat-label">Total Utilisateurs</div>
            			</div>
            			<div class="stat-card warning" onclick="filterAndShowActions('en-cours')" style="cursor: pointer;">
                			<div class="stat-value" id="pendingUsers">0</div>
                			<div class="stat-label">En Attente</div>
            			</div>
            			<div class="stat-card success" onclick="filterAndShowActions('termine')" style="cursor: pointer;">
                			<div class="stat-value" id="activeUsers">0</div>
                			<div class="stat-label">Actifs</div>
            			</div>
        		</div>

        		<h3>Utilisateurs en attente</h3>
        		<table>
            			<thead>
               				 <tr>
                    				<th>Nom</th>
                    				<th>Email</th>
                    				<th>Ministère</th>
                    				<th>Date d'inscription</th>
                    				<th>Actions</th>
                			</tr>
            			</thead>
            			<tbody id="pendingUsersTable"></tbody>
        		</table>

        		<h3 style="margin-top: 30px;">Tous les utilisateurs</h3>
        		<table>
            			<thead>
                			<tr>
                    				<th>Nom</th>
                    				<th>Email</th>
                    				<th>Ministère</th>
                    				<th>Rôle</th>
                    				<th>Statut</th>
                    				<th>Permissions</th>
                    				<th>Dernière connexion</th>
                    				<th>Actions</th>
                			</tr>
            			</thead>
            			<tbody id="allUsersTable"></tbody>
        		</table>
    		</div>
	</section>

        </main>

        <!-- FAB -->
        <button class="fab" onclick="openActionModal()">+</button>

        <!-- Modal Action -->
        <div class="modal" id="actionModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Nouvelle Action</h2>
                    <button class="close-modal" onclick="closeActionModal()">×</button>
                </div>
                <form id="actionForm">
                    <div class="form-group">
                        <label class="form-label">Ministère</label>
                        <select class="form-select" id="ministere" required></select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Action</label>
                        <input type="text" class="form-input" id="action" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-textarea" id="description"></textarea>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Responsable</label>
                            <select class="form-select" id="responsable" required></select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Priorité</label>
                            <select class="form-select" id="priorite">
                                <option value="basse">Basse</option>
                                <option value="moyenne">Moyenne</option>
                                <option value="haute">Haute</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Date Début</label>
                            <input type="date" class="form-input" id="dateDebut" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Date Fin</label>
                            <input type="date" class="form-input" id="dateFin" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Statut</label>
                        <select class="form-select" id="statut">
                            <option value="nouveau">Nouveau</option>
                            <option value="en-cours">En Cours</option>
                            <option value="termine">Terminé</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Observations</label>
                        <textarea class="form-textarea" id="observations" placeholder="Ajouter des observations..."></textarea>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Dossier de clôture</label>
                        <div class="file-upload-area" onclick="document.getElementById('closureFiles').click()">
                            <p>📁 Cliquez ou glissez des fichiers ici</p>
                            <input type="file" id="closureFiles" multiple style="display: none;" onchange="handleFileSelect(event)">
                        </div>
                        <div id="fileList" class="file-list"></div>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" onclick="closeActionModal()">Annuler</button>
                        <button type="submit" class="btn btn-primary">Enregistrer</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Modal Team -->
        <div class="modal" id="teamModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Nouveau Membre</h2>
                    <button class="close-modal" onclick="closeTeamModal()">×</button>
                </div>
                <form id="teamForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Nom Complet</label>
                            <input type="text" class="form-input" id="teamName" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Poste</label>
                            <input type="text" class="form-input" id="teamPosition" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Ministère</label>
                        <select class="form-select" id="teamMinistry" required></select>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-input" id="teamEmail" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Téléphone</label>
                            <input type="tel" class="form-input" id="teamPhone" required>
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" onclick="closeTeamModal()">Annuler</button>
                        <button type="submit" class="btn btn-primary">Enregistrer</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Modal Ministry -->
        <div class="modal" id="ministryModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Nouveau Ministère</h2>
                    <button class="close-modal" onclick="closeMinistryModal()">×</button>
                </div>
                <form id="ministryForm">
                    <div class="form-group">
                        <label class="form-label">Nom du Ministère</label>
                        <input type="text" class="form-input" id="ministryName" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Abréviation</label>
                        <input type="text" class="form-input" id="ministryAbbrev" maxlength="10">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-textarea" id="ministryDescription"></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" onclick="closeMinistryModal()">Annuler</button>
                        <button type="submit" class="btn btn-primary">Enregistrer</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Modal Permissions -->
        <div class="modal" id="permissionsModal">
            <div class="modal-content" style="max-width: 800px;">
                <div class="modal-header">
                    <h2 class="modal-title">Gérer les Permissions</h2>
                    <button class="close-modal" onclick="closePermissionsModal()">×</button>
                </div>
                <div class="form-group">
                    <label class="form-label">Utilisateur: <strong id="permUserName"></strong></label>
                    <input type="hidden" id="permUserId">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Appliquer un profil prédéfini</label>
                    <div style="display: flex; gap: 10px;">
                        <button class="btn btn-secondary" onclick="applyPermissionProfile('reader')">👁️ Lecteur</button>
                        <button class="btn btn-secondary" onclick="applyPermissionProfile('contributor')">✏️ Contributeur</button>
                        <button class="btn btn-secondary" onclick="applyPermissionProfile('manager')">👔 Gestionnaire</button>
                        <button class="btn btn-danger" onclick="applyPermissionProfile('admin')">👑 Admin Total</button>
                    </div>
                </div>

                <div class="form-group">
                    <label>
                        <input type="checkbox" id="applyToAllMinistries" onchange="toggleMinistrySelection()">
                        Appliquer à tous les ministères
                    </label>
                </div>

                <div id="ministrySelectionDiv">
                    <label class="form-label">Sélectionner les ministères</label>
                    <div id="ministryCheckboxList" style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; border-radius: 5px;">
                        <!-- Sera rempli dynamiquement -->
                    </div>
                </div>

                <h4 style="margin-top: 20px;">Permissions détaillées</h4>
                <table style="width: 100%;">
                    <tr>
                        <td><strong>Actions</strong></td>
                        <td>
                            <label><input type="checkbox" id="perm_view_actions" checked> Voir</label>
                            <label><input type="checkbox" id="perm_create_actions"> Créer</label>
                            <label><input type="checkbox" id="perm_edit_actions"> Modifier</label>
                            <label><input type="checkbox" id="perm_delete_actions"> Supprimer</label>
                        </td>
                    </tr>
                    <tr>
                        <td><strong>Équipe</strong></td>
                        <td>
                            <label><input type="checkbox" id="perm_view_team" checked> Voir</label>
                            <label><input type="checkbox" id="perm_manage_team"> Gérer</label>
                        </td>
                    </tr>
                    <tr>
                        <td><strong>Rapports</strong></td>
                        <td>
                            <label><input type="checkbox" id="perm_view_reports" checked> Voir</label>
                            <label><input type="checkbox" id="perm_export_data"> Exporter</label>
                        </td>
                    </tr>
                </table>

                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closePermissionsModal()">Annuler</button>
                    <button type="button" class="btn btn-danger" onclick="revokeAllPermissions()">🗑️ Révoquer tout</button>
                    <button type="button" class="btn btn-primary" onclick="savePermissions()">💾 Enregistrer</button>
                </div>
            </div>
        </div>

    <!-- Modal de visualisation des actions -->
<div class="modal" id="viewModal">
    <div class="modal-content" style="max-width: 800px;">
        <div class="modal-header">
            <div style="flex: 1;">
                <h2 class="modal-title" id="viewActionTitle">Détails de l'action</h2>
                <span style="display: inline-block; padding: 4px 10px; background: #E0F2FE; border-radius: 6px; font-size: 14px; font-weight: 600; color: #1E3A8A; margin-top: 5px;" id="viewActionCode">-</span>
            </div>
            <button class="close-modal" onclick="closeViewModal()">×</button>
        </div>
        
        <div style="display: grid; gap: 20px; margin-top: 20px;">
            <div style="background: #F8FAFC; padding: 15px; border-radius: 10px;">
                <h4 style="color: #1E3A8A; margin-bottom: 10px; font-size: 16px;">📋 Informations Générales</h4>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                    <div>
                        <label style="font-size: 12px; color: #7f8c8d; text-transform: uppercase;">Ministère</label>
                        <div id="viewMinistry" style="font-weight: 500;">-</div>
                    </div>
                    <div>
                        <label style="font-size: 12px; color: #7f8c8d; text-transform: uppercase;">Responsable</label>
                        <div id="viewResponsible" style="font-weight: 500;">-</div>
                    </div>
                    <div>
                        <label style="font-size: 12px; color: #7f8c8d; text-transform: uppercase;">Priorité</label>
                        <div id="viewPriority" style="font-weight: 500;">-</div>
                    </div>
                    <div>
                        <label style="font-size: 12px; color: #7f8c8d; text-transform: uppercase;">Statut</label>
                        <div id="viewStatus" style="font-weight: 500;">-</div>
                    </div>
                </div>
            </div>
            
            <div style="background: #F8FAFC; padding: 15px; border-radius: 10px;">
                <h4 style="color: #1E3A8A; margin-bottom: 10px; font-size: 16px;">📅 Dates</h4>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                    <div>
                        <label style="font-size: 12px; color: #7f8c8d; text-transform: uppercase;">Date de début</label>
                        <div id="viewStartDate" style="font-weight: 500;">-</div>
                    </div>
                    <div>
                        <label style="font-size: 12px; color: #7f8c8d; text-transform: uppercase;">Date de fin</label>
                        <div id="viewEndDate" style="font-weight: 500;">-</div>
                    </div>
                    <div>
                        <label style="font-size: 12px; color: #7f8c8d; text-transform: uppercase;">Créée le</label>
                        <div id="viewCreatedAt" style="font-weight: 500;">-</div>
                    </div>
                    <div>
                        <label style="font-size: 12px; color: #7f8c8d; text-transform: uppercase;">Créée par</label>
                        <div id="viewCreatedBy" style="font-weight: 500;">-</div>
                    </div>
                </div>
            </div>
            
            <div style="background: #F8FAFC; padding: 15px; border-radius: 10px;">
                <h4 style="color: #1E3A8A; margin-bottom: 10px; font-size: 16px;">📝 Description</h4>
                <div id="viewDescription" style="white-space: pre-wrap; padding: 10px; background: white; border-radius: 5px; min-height: 50px;">-</div>
            </div>
        </div>
        
        <div class="form-actions" style="margin-top: 25px;">
            <button type="button" class="btn btn-secondary" onclick="closeViewModal()">Fermer</button>
            <button type="button" class="btn btn-primary" onclick="editFromView()">✏️ Modifier</button>
        </div>
    </div>
</div>


    
    </div>

    <script>
        // ==========================================
        // INTÉGRATION API
        // ==========================================

        // Configuration API
        const API_URL = '/api';
        let authToken = localStorage.getItem('sgg_token');
        let currentUser = JSON.parse(localStorage.getItem('sgg_user') || '{}');

        // État global
        let actions = [];
        let teamMembers = [];
        let ministries = [];
        let currentFilter = 'all';
        let editingIndex = null;

        // Fonction pour visualiser une action
        async function viewAction(actionId) {
            try {
                const response = await fetch(`${API_URL}/actions/${actionId}/view`, {
                    headers: { "Authorization": `Bearer ${authToken}` }
                });
                if (response.ok) {
                    const action = await response.json();
                    displayActionDetails(action);
                    document.getElementById("viewModal").classList.add("active");
                } else {
                    showAlert("Erreur lors du chargement", "error");
                }
            } catch (error) {
                console.error("Erreur:", error);
                showAlert("Erreur de connexion", "error");
            }
        }

        function displayActionDetails(action) {
            document.getElementById("viewActionTitle").textContent = action.action_title || action.action;
            document.getElementById("viewActionCode").textContent = action.action_code || action.id_display || `ID: ${action.id}`;
            document.getElementById("viewMinistry").textContent = action.ministry || action.ministere;
            document.getElementById("viewResponsible").textContent = action.responsible || action.responsable;
            document.getElementById("viewPriority").textContent = action.priority || action.priorite;
            document.getElementById("viewStatus").innerHTML = `<span class="status-badge ${action.status || action.statut}">${getStatusLabel(action.status || action.statut)}</span>`;
            document.getElementById("viewStartDate").textContent = formatDate(action.start_date || action.dateDebut);
            document.getElementById("viewEndDate").textContent = formatDate(action.end_date || action.dateFin);
            document.getElementById("viewCreatedAt").textContent = action.created_at_formatted || formatDate(action.created_at);
            document.getElementById("viewCreatedBy").textContent = action.created_by_name || "-";
            document.getElementById("viewDescription").textContent = action.description || "Aucune description";
        }

        function closeViewModal() {
            document.getElementById("viewModal").classList.remove("active");
        }

        function editFromView() {
            const actionCode = document.getElementById("viewActionCode").textContent;
            closeViewModal();
            const index = actions.findIndex(a => a.action_code === actionCode || a.id == actionCode.replace("ID: ", ""));
            if (index !== -1) editAction(index);
        }

        function filterAndShowActions(status) {
            document.querySelectorAll(".section").forEach(s => s.classList.remove("active"));
            document.getElementById("gestion").classList.add("active");
            if (status === "en-retard") {
                currentFilter = "all";
                renderActions();
            } else {
                currentFilter = status;
                filterByStatus(status);
            }
        }
        let selectedFiles = [];

        // Vérification de l'authentification au chargement
        window.addEventListener('DOMContentLoaded', async function() {
            // Vérifier si l'utilisateur est connecté
            if (!authToken) {
                window.location.href = './login.html';
                return;
            }

            // Vérifier la validité du token
            try {
                const response = await fetch(`${API_URL}/auth/verify`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Token invalide');
                }

                const data = await response.json();
                currentUser = data.user;
                localStorage.setItem('sgg_user', JSON.stringify(currentUser));

                // Afficher les infos utilisateur dans le header
                updateUserInfo();

            } catch (error) {
                console.error('Erreur authentification:', error);
                localStorage.removeItem('sgg_token');
                localStorage.removeItem('sgg_user');
                window.location.href = './login.html';
                return;
            }

            // Charger les données depuis l'API
            await loadDataFromAPI();
            
            updateDashboard();
            renderActions();
            renderTeam();
            renderMinistries();
            populateDropdowns();
            initCharts();

            // Admin features
            if (currentUser.role === 'admin') {
                // Ajouter le menu Administration
                const navMenu = document.querySelector('.nav-menu');
                const adminMenuItem = document.createElement('a');
                adminMenuItem.className = 'nav-item';
                adminMenuItem.onclick = () => showSection('administration');
                adminMenuItem.innerHTML = `
                    <span class="nav-icon">👑</span>
                    <span class="nav-text">Administration</span>
                `;
                navMenu.appendChild(adminMenuItem);
                
                // Charger les utilisateurs en attente
                loadPendingUsers();
            }
        });

        // Fonction pour charger les données depuis l'API - MODIFIÉE
        async function loadDataFromAPI() {
            try {
                // NOUVEAU : Charger les ministères depuis l'API
                const ministriesResponse = await fetch(`${API_URL}/ministries`);
                if (ministriesResponse.ok) {
                    const ministriesData = await ministriesResponse.json();
                    ministries = ministriesData.map(ministry => ({
                        id: ministry.id,
                        name: ministry.name,
                        abbrev: ministry.abbrev || '',
                        description: ministry.description || ''
                    }));
                    console.log('✅ Ministères chargés depuis la BDD:', ministries);
                } else {
                    console.error('Erreur chargement ministères depuis API');
                }

                // Charger les actions
                const actionsResponse = await fetch(`${API_URL}/actions`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                if (actionsResponse.ok) {
                    const actionsData = await actionsResponse.json();
                    actions = actionsData.map(action => ({
                        id: action.id,
                        ministere: action.ministry,
                        action: action.action_title,
                        description: action.description,
                        responsable: action.responsible,
                        priorite: action.priority,
                        dateDebut: action.start_date,
                        dateFin: action.end_date,
                        statut: action.status,
                        observations: action.observations || '',
                        closureFiles: action.closure_files || [],
                        dateCreation: action.created_at
                    }));
                }

                // Charger l'équipe
                const teamResponse = await fetch(`${API_URL}/teams`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                if (teamResponse.ok) {
                    const teamData = await teamResponse.json();
                    teamMembers = teamData.map(member => ({
                        id: member.id,
                        name: member.name,
                        position: member.position,
                        ministry: member.ministry,
                        email: member.email,
                        phone: member.phone
                    }));
                }

            } catch (error) {
                console.error('Erreur chargement données API:', error);
                // En cas d'erreur, charger depuis le localStorage
                loadFromLocalStorage();
            }
        }

        // Fonction pour afficher les infos utilisateur
        function updateUserInfo() {
            if (currentUser && currentUser.name) {
                const userInfo = document.getElementById('userInfo');
                if (userInfo) {
                    userInfo.textContent = `👤 ${currentUser.name}`;
                }
            }
        }

        // Fonction de déconnexion
        function logout() {
            localStorage.removeItem('sgg_token');
            localStorage.removeItem('sgg_user');
            window.location.href = './login.html';
        }

        // Gestion des fichiers
        function handleFileSelect(event) {
            const files = Array.from(event.target.files);
            selectedFiles = [...selectedFiles, ...files];
            displayFileList();
        }

        function displayFileList() {
            const fileListDiv = document.getElementById('fileList');
            fileListDiv.innerHTML = '';
            
            selectedFiles.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <span>📄 ${file.name}</span>
                    <button onclick="removeFile(${index})" class="btn-icon delete">×</button>
                `;
                fileListDiv.appendChild(fileItem);
            });
        }

        function removeFile(index) {
            selectedFiles.splice(index, 1);
            displayFileList();
        }

        // Gestion des formulaires avec API - MODIFIÉ
        document.getElementById('actionForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const actionData = {
                ministry: document.getElementById('ministere').value,
                action_title: document.getElementById('action').value,
                description: document.getElementById('description').value,
                responsible: document.getElementById('responsable').value,
                priority: document.getElementById('priorite').value,
                start_date: document.getElementById('dateDebut').value,
                end_date: document.getElementById('dateFin').value,
                status: document.getElementById('statut').value,
                observations: document.getElementById('observations').value,
                closure_files: selectedFiles.map(f => f.name) // Pour l'instant on stocke juste les noms
            };

            try {
                let response;
                
                if (editingIndex !== null) {
                    // Mise à jour
                    const actionId = actions[editingIndex].id;
                    response = await fetch(`${API_URL}/actions/${actionId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${authToken}`
                        },
                        body: JSON.stringify(actionData)
                    });
                } else {
                    // Création
                    response = await fetch(`${API_URL}/actions`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${authToken}`
                        },
                        body: JSON.stringify(actionData)
                    });
                }

                if (response.ok) {
                    await loadDataFromAPI();
                    closeActionModal();
                    renderActions();
                    updateDashboard();
                    showAlert('Action enregistrée avec succès!', 'success');
                } else {
                    const error = await response.json();
                    showAlert(error.error || 'Erreur lors de l\'enregistrement', 'error');
                }
            } catch (error) {
                console.error('Erreur sauvegarde action:', error);
                // Fallback en mode local
                saveActionLocally(actionData);
            }
        });

        document.getElementById('teamForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const memberData = {
                name: document.getElementById('teamName').value,
                position: document.getElementById('teamPosition').value,
                ministry: document.getElementById('teamMinistry').value,
                email: document.getElementById('teamEmail').value,
                phone: document.getElementById('teamPhone').value
            };

            try {
                let response;
                
                if (editingIndex !== null && teamMembers[editingIndex]?.id) {
                    // Mise à jour
                    const memberId = teamMembers[editingIndex].id;
                    response = await fetch(`${API_URL}/teams/${memberId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${authToken}`
                        },
                        body: JSON.stringify(memberData)
                    });
                } else {
                    // Création
                    response = await fetch(`${API_URL}/teams`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${authToken}`
                        },
                        body: JSON.stringify(memberData)
                    });
                }

                if (response.ok) {
                    await loadDataFromAPI();
                    closeTeamModal();
                    renderTeam();
                    populateDropdowns();
                    showAlert(editingIndex !== null ? 'Membre modifié avec succès!' : 'Membre ajouté avec succès!', 'success');
                } else {
                    const error = await response.json();
                    showAlert(error.error || 'Erreur lors de l\'opération', 'error');
                }
            } catch (error) {
                console.error('Erreur opération membre:', error);
                // Fallback en mode local
                saveMemberLocally(memberData);
            }
        });

        // MODIFIÉ : Formulaire ministère pour utiliser l'API
        document.getElementById('ministryForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const ministry = {
                name: document.getElementById('ministryName').value,
                abbrev: document.getElementById('ministryAbbrev').value || '',
                description: document.getElementById('ministryDescription').value || ''
            };

            try {
                let response;
                
                if (editingIndex !== null && ministries[editingIndex]?.id) {
                    // Mise à jour
                    const ministryId = ministries[editingIndex].id;
                    response = await fetch(`${API_URL}/ministries/${ministryId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${authToken}`
                        },
                        body: JSON.stringify(ministry)
                    });
                } else {
                    // Création
                    response = await fetch(`${API_URL}/ministries`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${authToken}`
                        },
                        body: JSON.stringify(ministry)
                    });
                }

                if (response.ok) {
                    await loadDataFromAPI();
                    closeMinistryModal();
                    renderMinistries();
                    populateDropdowns();
                    showAlert(editingIndex !== null ? 'Ministère modifié avec succès!' : 'Ministère ajouté avec succès!', 'success');
                } else {
                    const error = await response.json();
                    showAlert(error.error || 'Erreur lors de l\'opération', 'error');
                }
            } catch (error) {
                console.error('Erreur opération ministère:', error);
                // Fallback local
                if (editingIndex !== null) {
                    ministries[editingIndex] = {...ministries[editingIndex], ...ministry};
                } else {
                    ministries.push(ministry);
                }
                saveToLocalStorage();
                closeMinistryModal();
                renderMinistries();
                populateDropdowns();
                showAlert('Ministère sauvegardé localement!', 'warning');
            }
        });

        // Fallback pour sauvegarde locale
        function saveActionLocally(actionData) {
            const action = {
                id: editingIndex !== null ? actions[editingIndex].id : generateId(),
                ministere: actionData.ministry,
                action: actionData.action_title,
                description: actionData.description,
                responsable: actionData.responsible,
                priorite: actionData.priority,
                dateDebut: actionData.start_date,
                dateFin: actionData.end_date,
                statut: actionData.status,
                observations: actionData.observations,
                closureFiles: actionData.closure_files,
                dateCreation: editingIndex !== null ? actions[editingIndex].dateCreation : new Date().toISOString()
            };

            if (editingIndex !== null) {
                actions[editingIndex] = action;
                editingIndex = null;
            } else {
                actions.push(action);
            }

            saveToLocalStorage();
            closeActionModal();
            renderActions();
            updateDashboard();
            showAlert('Action enregistrée localement!', 'success');
        }

        function saveMemberLocally(memberData) {
            if (editingIndex !== null) {
                // Mise à jour locale
                teamMembers[editingIndex] = {
                    ...teamMembers[editingIndex],
                    ...memberData
                };
                editingIndex = null;
            } else {
                // Création locale
                const member = {
                    id: generateId('TEAM'),
                    name: memberData.name,
                    position: memberData.position,
                    ministry: memberData.ministry,
                    email: memberData.email,
                    phone: memberData.phone
                };
                teamMembers.push(member);
            }

            saveToLocalStorage();
            closeTeamModal();
            renderTeam();
            populateDropdowns();
            showAlert('Membre sauvegardé localement!', 'success');
        }

        // Fonctions utilitaires
        function generateId(prefix = 'ACT') {
            return prefix + '-' + Date.now().toString(36).toUpperCase();
        }

        function saveToLocalStorage() {
            localStorage.setItem('sgg_actions', JSON.stringify(actions));
            localStorage.setItem('sgg_teamMembers', JSON.stringify(teamMembers));
            localStorage.setItem('sgg_ministries', JSON.stringify(ministries));
        }

        function loadFromLocalStorage() {
            const savedActions = localStorage.getItem('sgg_actions');
            if (savedActions) actions = JSON.parse(savedActions);
            
            const savedTeam = localStorage.getItem('sgg_teamMembers');
            if (savedTeam) teamMembers = JSON.parse(savedTeam);
            
            const savedMinistries = localStorage.getItem('sgg_ministries');
            if (savedMinistries) ministries = JSON.parse(savedMinistries);
        }

        // Fonctions d'affichage
        function updateDashboard() {
            const total = actions.length;
            const completed = actions.filter(a => a.statut === 'termine').length;
            const inProgress = actions.filter(a => a.statut === 'en-cours').length;
            const overdue = actions.filter(a => checkIfOverdue(a)).length;
            
            document.getElementById('totalActions').textContent = total;
            document.getElementById('completedActions').textContent = completed;
            document.getElementById('inProgressActions').textContent = inProgress;
            document.getElementById('overdueActions').textContent = overdue;
            
            // Actions récentes
            const tbody = document.getElementById('recentActionsTable');
            tbody.innerHTML = '';
            
            actions.slice(-5).reverse().forEach(action => {
                const row = tbody.insertRow();
                row.innerHTML = `
                    <td>${action.id}</td>
                    <td>${action.ministere}</td>
                    <td>${action.action}</td>
                    <td>${action.responsable}</td>
                    <td><span class="status-badge ${action.statut}">${getStatusLabel(action.statut)}</span></td>
                    <td>${formatDate(action.dateFin)}</td>
                `;
            });
        }

        function renderActions() {
            const tbody = document.getElementById('actionsTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            let filteredActions = actions;
            
            if (currentFilter !== 'all') {
                filteredActions = actions.filter(a => a.statut === currentFilter);
            }
            
            const searchTerm = document.getElementById('searchInput')?.value.toLowerCase() || '';
            if (searchTerm) {
                filteredActions = filteredActions.filter(a => 
                    a.action.toLowerCase().includes(searchTerm) ||
                    a.ministere.toLowerCase().includes(searchTerm) ||
                    a.responsable.toLowerCase().includes(searchTerm)
                );
            }
            
            filteredActions.forEach((action, index) => {
                const originalIndex = actions.indexOf(action);
                const isOverdue = checkIfOverdue(action);
                
                const row = tbody.insertRow();
                row.innerHTML = `
                    <td>${action.id}</td>
                    <td>${action.ministere}</td>
                    <td>${action.action}</td>
                    <td>${action.responsable}</td>
                    <td>${action.priorite}</td>
                    <td>${formatDate(action.dateDebut)}</td>
                    <td>${formatDate(action.dateFin)}</td>
                    <td><span class="status-badge ${isOverdue && action.statut !== 'termine' ? 'en-retard' : action.statut}">
                        ${isOverdue && action.statut !== 'termine' ? 'En Retard' : getStatusLabel(action.statut)}
                    </span></td>
                    <td>${action.observations ? action.observations.substring(0, 50) + '...' : '-'}</td>
                    <td>${action.closureFiles && action.closureFiles.length > 0 ? `📁 ${action.closureFiles.length}` : '-'}</td>
                    <td>
<button class="btn-icon" style="background: rgba(14, 165, 233, 0.1); color: #0EA5E9;" onclick="console.log('Action:', actions[${originalIndex}]); viewAction(actions[${originalIndex}].id)">👁️</button>
                        <button class="btn-icon edit" onclick="editAction(${originalIndex})">✏️</button>
                        <button class="btn-icon delete" onclick="deleteAction(${originalIndex})">🗑️</button>
                    </td>
                `;
            });
        }

        function renderTeam() {
            const tbody = document.getElementById('teamTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            teamMembers.forEach((member, index) => {
                const memberActions = actions.filter(a => a.responsable === member.name);
                
                const row = tbody.insertRow();
                row.innerHTML = `
                    <td>${member.name}</td>
                    <td>${member.position}</td>
                    <td>${member.ministry}</td>
                    <td>${member.email}</td>
                    <td>${member.phone}</td>
                    <td>${memberActions.length}</td>
                    <td>
                        <button class="btn-icon edit" onclick="editTeamMember(${index})">✏️</button>
                        <button class="btn-icon delete" onclick="deleteTeamMember(${index})">🗑️</button>
                    </td>
                `;
            });
        }

        function renderMinistries() {
            const container = document.getElementById('ministryList');
            if (!container) return;
            
            container.innerHTML = '';
            
            ministries.forEach((ministry, index) => {
                const div = document.createElement('div');
                div.className = 'ministry-item';
                div.innerHTML = `
                    <div>
                        <strong>${ministry.name}</strong> ${ministry.abbrev ? `(${ministry.abbrev})` : ''}
                        ${ministry.description ? `<br><small>${ministry.description}</small>` : ''}
                    </div>
                    <div>
                        <button class="btn-icon edit" onclick="editMinistry(${index})">✏️</button>
                        <button class="btn-icon delete" onclick="deleteMinistry(${index})">🗑️</button>
                    </div>
                `;
                container.appendChild(div);
            });
        }

        function populateDropdowns() {
            // Ministères
            const ministereSelect = document.getElementById('ministere');
            const teamMinistrySelect = document.getElementById('teamMinistry');
            
            if (ministereSelect) {
                ministereSelect.innerHTML = '<option value="">Sélectionner un ministère</option>';
                ministries.forEach(m => {
                    ministereSelect.innerHTML += `<option value="${m.name}">${m.name}</option>`;
                });
            }
            
            if (teamMinistrySelect) {
                teamMinistrySelect.innerHTML = '<option value="">Sélectionner un ministère</option>';
                ministries.forEach(m => {
                    teamMinistrySelect.innerHTML += `<option value="${m.name}">${m.name}</option>`;
                });
            }
            
            // Responsables
            const responsableSelect = document.getElementById('responsable');
            if (responsableSelect) {
                responsableSelect.innerHTML = '<option value="">Sélectionner un responsable</option>';
                teamMembers.forEach(m => {
                    responsableSelect.innerHTML += `<option value="${m.name}">${m.name} - ${m.position}</option>`;
                });
            }
        }

        // Graphiques
        function initCharts() {
            drawEvolutionChart();
            drawStatusChart();
        }

        function drawEvolutionChart() {
            const canvas = document.getElementById('evolutionChart');
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            const width = canvas.width = canvas.offsetWidth;
            const height = canvas.height = 300;
            
            ctx.clearRect(0, 0, width, height);
            
            // Données simulées
            const months = ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'];
            const data = [15, 22, 18, 25, 30, 28];
            
            const gradient = ctx.createLinearGradient(0, 0, width, 0);
            gradient.addColorStop(0, '#1E3A8A');
            gradient.addColorStop(1, '#10B981');
            
            ctx.strokeStyle = gradient;
            ctx.lineWidth = 3;
            ctx.beginPath();
            
            const padding = 40;
            const graphWidth = width - 2 * padding;
            const graphHeight = height - 2 * padding;
            const stepX = graphWidth / (months.length - 1);
            const maxValue = Math.max(...data);
            
            data.forEach((value, i) => {
                const x = padding + i * stepX;
                const y = height - padding - (value / maxValue) * graphHeight;
                
                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
                
                ctx.fillStyle = '#10B981';
                ctx.beginPath();
                ctx.arc(x, y, 5, 0, Math.PI * 2);
                ctx.fill();
                
                ctx.fillStyle = '#1E3A8A';
                ctx.font = '12px Inter';
                ctx.textAlign = 'center';
                ctx.fillText(months[i], x, height - 10);
                ctx.fillText(value, x, y - 10);
            });
            
            ctx.stroke();
        }

        function drawStatusChart() {
            const canvas = document.getElementById('statusChart');
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            const width = canvas.width = canvas.offsetWidth;
            const height = canvas.height = 300;
            
            ctx.clearRect(0, 0, width, height);
            
            const statusCounts = {
                'Nouveau': actions.filter(a => a.statut === 'nouveau').length,
                'En Cours': actions.filter(a => a.statut === 'en-cours').length,
                'Terminé': actions.filter(a => a.statut === 'termine').length,
                'En Retard': actions.filter(a => checkIfOverdue(a) && a.statut !== 'termine').length
            };
            
            const total = Object.values(statusCounts).reduce((a, b) => a + b, 0);
            if (total === 0) return;
            
            const centerX = width / 2;
            const centerY = height / 2;
            const radius = Math.min(width, height) / 3;
            
            let currentAngle = -Math.PI / 2;
            const colors = ['#3B82F6', '#F59E0B', '#10B981', '#EF4444'];
            
            Object.entries(statusCounts).forEach(([status, count], i) => {
                const sliceAngle = (count / total) * 2 * Math.PI;
                
                ctx.fillStyle = colors[i];
                ctx.beginPath();
                ctx.moveTo(centerX, centerY);
                ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
                ctx.closePath();
                ctx.fill();
                
                ctx.strokeStyle = 'white';
                ctx.lineWidth = 2;
                ctx.stroke();
                
                const labelAngle = currentAngle + sliceAngle / 2;
                const labelX = centerX + Math.cos(labelAngle) * (radius + 30);
                const labelY = centerY + Math.sin(labelAngle) * (radius + 30);
                
                ctx.fillStyle = '#1E3A8A';
                ctx.font = '12px Inter';
                ctx.textAlign = 'center';
                ctx.fillText(`${status}: ${count}`, labelX, labelY);
                
                currentAngle += sliceAngle;
            });
        }

        // Actions CRUD avec API
        async function editAction(index) {
            const action = actions[index];
            editingIndex = index;
            
            document.getElementById('ministere').value = action.ministere;
            document.getElementById('action').value = action.action;
            document.getElementById('description').value = action.description || '';
            document.getElementById('responsable').value = action.responsable;
            document.getElementById('priorite').value = action.priorite;
            document.getElementById('dateDebut').value = action.dateDebut;
            document.getElementById('dateFin').value = action.dateFin;
            document.getElementById('statut').value = action.statut;
            document.getElementById('observations').value = action.observations || '';
            
            // Afficher les fichiers existants
            selectedFiles = action.closureFiles || [];
            displayFileList();
            
            document.querySelector('#actionModal .modal-title').textContent = 'Modifier l\'Action';
            openActionModal();
        }

        // Fonction pour éditer un membre de l'équipe
        function editTeamMember(index) {
            const member = teamMembers[index];
            editingIndex = index;
            
            document.getElementById('teamName').value = member.name;
            document.getElementById('teamPosition').value = member.position;
            document.getElementById('teamMinistry').value = member.ministry;
            document.getElementById('teamEmail').value = member.email;
            document.getElementById('teamPhone').value = member.phone;
            
            document.querySelector('#teamModal .modal-title').textContent = 'Modifier le Membre';
            openTeamModal();
        }

        // Fonction pour éditer un ministère
        function editMinistry(index) {
            const ministry = ministries[index];
            editingIndex = index;
            
            document.getElementById('ministryName').value = ministry.name;
            document.getElementById('ministryAbbrev').value = ministry.abbrev || '';
            document.getElementById('ministryDescription').value = ministry.description || '';
            
            document.querySelector('#ministryModal .modal-title').textContent = 'Modifier le Ministère';
            openMinistryModal();
        }

        async function deleteAction(index) {
            if (confirm('Supprimer cette action?')) {
                const actionId = actions[index].id;
                
                try {
                    const response = await fetch(`${API_URL}/actions/${actionId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        }
                    });

                    if (response.ok) {
                        await loadDataFromAPI();
                        renderActions();
                        updateDashboard();
                        showAlert('Action supprimée', 'warning');
                    } else {
                        showAlert('Erreur lors de la suppression', 'error');
                    }
                } catch (error) {
                    console.error('Erreur suppression:', error);
                    // Fallback local
                    actions.splice(index, 1);
                    saveToLocalStorage();
                    renderActions();
                    updateDashboard();
                    showAlert('Action supprimée localement', 'warning');
                }
            }
        }

        async function deleteTeamMember(index) {
            if (confirm('Supprimer ce membre?')) {
                const memberId = teamMembers[index].id;
                
                try {
                    const response = await fetch(`${API_URL}/teams/${memberId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        }
                    });

                    if (response.ok) {
                        await loadDataFromAPI();
                        renderTeam();
                        populateDropdowns();
                        showAlert('Membre supprimé', 'warning');
                    } else {
                        const error = await response.json();
                        showAlert(error.error || 'Erreur lors de la suppression', 'error');
                    }
                } catch (error) {
                    console.error('Erreur suppression:', error);
                    // Fallback local
                    teamMembers.splice(index, 1);
                    saveToLocalStorage();
                    renderTeam();
                    populateDropdowns();
                    showAlert('Membre supprimé localement', 'warning');
                }
            }
        }

        // MODIFIÉ : Fonction deleteMinistry pour utiliser l'API
        async function deleteMinistry(index) {
            if (confirm('Supprimer ce ministère?')) {
                const ministry = ministries[index];
                
                if (ministry.id) {
                    try {
                        const response = await fetch(`${API_URL}/ministries/${ministry.id}`, {
                            method: 'DELETE',
                            headers: {
                                'Authorization': `Bearer ${authToken}`
                            }
                        });

                        if (response.ok) {
                            await loadDataFromAPI();
                            renderMinistries();
                            populateDropdowns();
                            showAlert('Ministère supprimé', 'warning');
                        } else {
                            const error = await response.json();
                            showAlert(error.error || 'Erreur lors de la suppression', 'error');
                        }
                    } catch (error) {
                        console.error('Erreur suppression ministère:', error);
                        // Fallback local
                        ministries.splice(index, 1);
                        saveToLocalStorage();
                        renderMinistries();
                        populateDropdowns();
                        showAlert('Ministère supprimé localement', 'warning');
                    }
                } else {
                    // Ministère local uniquement
                    ministries.splice(index, 1);
                    saveToLocalStorage();
                    renderMinistries();
                    populateDropdowns();
                    showAlert('Ministère supprimé', 'warning');
                }
            }
        }

        // Modals
        function openActionModal() {
            document.getElementById('actionModal').classList.add('active');
            populateDropdowns();
        }

        function closeActionModal() {
            document.getElementById('actionModal').classList.remove('active');
            document.getElementById('actionForm').reset();
            editingIndex = null;
            selectedFiles = [];
            document.getElementById('fileList').innerHTML = '';
            document.querySelector('#actionModal .modal-title').textContent = 'Nouvelle Action';
        }

        function openTeamModal() {
            document.getElementById('teamModal').classList.add('active');
            populateDropdowns();
        }

        function closeTeamModal() {
            document.getElementById('teamModal').classList.remove('active');
            document.getElementById('teamForm').reset();
            editingIndex = null;
            document.querySelector('#teamModal .modal-title').textContent = 'Nouveau Membre';
        }

        function openMinistryModal() {
            document.getElementById('ministryModal').classList.add('active');
        }

        function closeMinistryModal() {
            document.getElementById('ministryModal').classList.remove('active');
            document.getElementById('ministryForm').reset();
            editingIndex = null;
            document.querySelector('#ministryModal .modal-title').textContent = 'Nouveau Ministère';
        }

        // Navigation
        function showSection(sectionId) {
            document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
            document.getElementById(sectionId).classList.add('active');
            
            document.querySelectorAll('.nav-item').forEach(i => i.classList.remove('active'));
            event.target.closest('.nav-item').classList.add('active');
            
            if (sectionId === 'dashboard') {
                initCharts();
            }
        }

        function toggleSidebar() {
            document.getElementById('sidebar').classList.toggle('collapsed');
        }

        function toggleMobileSidebar() {
            document.getElementById('sidebar').classList.toggle('active');
        }

        // Configuration
        function showConfigTab(tabName) {
            document.querySelectorAll('.config-tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.config-section').forEach(s => s.classList.remove('active'));
            
            event.target.classList.add('active');
            document.getElementById('config-' + tabName).classList.add('active');
        }

        // Filtres
        function filterByStatus(status) {
            currentFilter = status;
            
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            renderActions();
        }

        function filterActions() {
            renderActions();
        }

        // Export/Import
        function exportToExcel() {
            let excelContent = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40">';
            excelContent += '<head><meta charset="utf-8"><title>Export SGG</title></head>';
            excelContent += '<body><table border="1">';
            
            excelContent += '<tr style="background-color: #1E3A8A; color: white; font-weight: bold;">';
            excelContent += '<th>ID</th><th>Ministère</th><th>Action</th><th>Description</th>';
            excelContent += '<th>Responsable</th><th>Priorité</th><th>Date Début</th>';
            excelContent += '<th>Date Fin</th><th>Statut</th><th>Observations</th></tr>';
            
            actions.forEach(action => {
                excelContent += '<tr>';
                excelContent += `<td>${action.id}</td>`;
                excelContent += `<td>${action.ministere}</td>`;
                excelContent += `<td>${action.action}</td>`;
                excelContent += `<td>${action.description || ''}</td>`;
                excelContent += `<td>${action.responsable}</td>`;
                excelContent += `<td>${action.priorite}</td>`;
                excelContent += `<td>${action.dateDebut}</td>`;
                excelContent += `<td>${action.dateFin}</td>`;
                excelContent += `<td>${getStatusLabel(action.statut)}</td>`;
                excelContent += `<td>${action.observations || ''}</td>`;
                excelContent += '</tr>';
            });
            
            excelContent += '</table></body></html>';
            
            const blob = new Blob([excelContent], { type: 'application/vnd.ms-excel' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `SGG_Export_${new Date().toISOString().split('T')[0]}.xls`;
            link.click();
            
            showAlert('Export Excel réussi!', 'success');
        }

        function exportToCSV() {
            let csvContent = 'ID,Ministère,Action,Description,Responsable,Priorité,Date Début,Date Fin,Statut,Observations\n';
            
            actions.forEach(action => {
                csvContent += `"${action.id}","${action.ministere}","${action.action}",`;
                csvContent += `"${action.description || ''}","${action.responsable}",`;
                csvContent += `"${action.priorite}","${action.dateDebut}","${action.dateFin}","${action.statut}","${action.observations || ''}"\n`;
            });
            
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `SGG_Export_${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
            
            showAlert('Export CSV réussi!', 'success');
        }

        function exportToPDF() {
            const printWindow = window.open('', '_blank');
            
            let htmlContent = `
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Rapport SGG - ${new Date().toLocaleDateString('fr-FR')}</title>
                    <style>
                        body { font-family: Arial, sans-serif; padding: 20px; }
                        h1 { color: #1E3A8A; border-bottom: 3px solid #1E3A8A; padding-bottom: 10px; }
                        h2 { color: #14B8A6; margin-top: 30px; }
                        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                        th { background-color: #1E3A8A; color: white; padding: 10px; text-align: left; }
                        td { padding: 8px; border-bottom: 1px solid #ddd; }
                        tr:nth-child(even) { background-color: #f2f2f2; }
                        .summary { background: #E0F2FE; padding: 15px; border-radius: 5px; margin: 20px 0; }
                        .status-nouveau { color: #1E3A8A; font-weight: bold; }
                        .status-en-cours { color: #D97706; font-weight: bold; }
                        .status-termine { color: #059669; font-weight: bold; }
                        .status-en-retard { color: #DC2626; font-weight: bold; }
                        @media print { body { margin: 0; } }
                    </style>
                </head>
                <body>
                    <h1>Secrétariat Général du Gouvernement</h1>
                    <h2>Rapport des Actions Ministérielles</h2>
                    <p><strong>Date du rapport:</strong> ${new Date().toLocaleDateString('fr-FR')}</p>
                    
                    <div class="summary">
                        <h3>Résumé</h3>
                        <p><strong>Total des actions:</strong> ${actions.length}</p>
                        <p><strong>Actions terminées:</strong> ${actions.filter(a => a.statut === 'termine').length}</p>
                        <p><strong>Actions en cours:</strong> ${actions.filter(a => a.statut === 'en-cours').length}</p>
                        <p><strong>Actions en retard:</strong> ${actions.filter(a => checkIfOverdue(a)).length}</p>
                    </div>
                    
                    <h2>Liste Détaillée des Actions</h2>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Ministère</th>
                                <th>Action</th>
                                <th>Responsable</th>
                                <th>Priorité</th>
                                <th>Date Fin</th>
                                <th>Statut</th>
                            </tr>
                        </thead>
                        <tbody>`;
            
            actions.forEach(action => {
                const isOverdue = checkIfOverdue(action);
                const statusClass = isOverdue && action.statut !== 'termine' ? 'en-retard' : action.statut;
                const statusLabel = isOverdue && action.statut !== 'termine' ? 'En Retard' : getStatusLabel(action.statut);
                
                htmlContent += `
                    <tr>
                        <td>${action.id}</td>
                        <td>${action.ministere}</td>
                        <td>${action.action}</td>
                        <td>${action.responsable}</td>
                        <td>${action.priorite}</td>
                        <td>${formatDate(action.dateFin)}</td>
                        <td class="status-${statusClass}">${statusLabel}</td>
                    </tr>`;
            });
            
            htmlContent += `
                        </tbody>
                    </table>
                </body>
                </html>`;
            
            printWindow.document.write(htmlContent);
            printWindow.document.close();
            setTimeout(() => printWindow.print(), 500);
            
            showAlert('PDF prêt à imprimer!', 'success');
        }

        function importCSV(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const content = e.target.result;
                    const lines = content.split('\n');
                    const headers = lines[0].split(',');
                    
                    for (let i = 1; i < lines.length; i++) {
                        if (lines[i].trim()) {
                            const values = lines[i].match(/(".*?"|[^,]+)/g);
                            if (values && values.length >= 8) {
                                const action = {
                                    id: generateId(),
                                    ministere: values[1]?.replace(/"/g, '').trim(),
                                    action: values[2]?.replace(/"/g, '').trim(),
                                    description: values[3]?.replace(/"/g, '').trim(),
                                    responsable: values[4]?.replace(/"/g, '').trim(),
                                    priorite: values[5]?.replace(/"/g, '').trim() || 'moyenne',
                                    dateDebut: values[6]?.replace(/"/g, '').trim(),
                                    dateFin: values[7]?.replace(/"/g, '').trim(),
                                    statut: values[8]?.replace(/"/g, '').trim() || 'nouveau',
                                    observations: values[9]?.replace(/"/g, '').trim() || '',
                                    dateCreation: new Date().toISOString()
                                };
                                actions.push(action);
                            }
                        }
                    }
                    
                    saveToLocalStorage();
                    renderActions();
                    updateDashboard();
                    showAlert('Import CSV réussi!', 'success');
                } catch (error) {
                    showAlert('Erreur lors de l\'import: ' + error.message, 'error');
                }
            };
            
            reader.readAsText(file);
        }

        function backupData() {
            const backup = {
                version: '13.0',
                date: new Date().toISOString(),
                actions: actions,
                teamMembers: teamMembers,
                ministries: ministries
            };
            
            const json = JSON.stringify(backup, null, 2);
            const blob = new Blob([json], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `SGG_Backup_${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            showAlert('Sauvegarde créée avec succès!', 'success');
        }

        function restoreData() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = function(e) {
                const file = e.target.files[0];
                const reader = new FileReader();
                reader.onload = function(event) {
                    try {
                        const backup = JSON.parse(event.target.result);
                        
                        if (confirm('Ceci remplacera toutes les données actuelles. Continuer?')) {
                            actions = backup.actions || [];
                            teamMembers = backup.teamMembers || [];
                            ministries = backup.ministries || [];
                            
                            saveToLocalStorage();
                            location.reload();
                        }
                    } catch (error) {
                        showAlert('Erreur lors de la restauration', 'error');
                    }
                };
                reader.readAsText(file);
            };
            input.click();
        }

        function resetData() {
            if (confirm('ATTENTION: Ceci supprimera TOUTES les données. Êtes-vous sûr?')) {
                if (confirm('Dernière confirmation: Toutes les données seront perdues!')) {
                    localStorage.clear();
                    location.reload();
                }
            }
        }

        // Rapports
        function generateMonthlyReport() {
            exportToPDF();
        }

        function generateMinistryReport() {
            exportToPDF();
        }

        function generatePerformanceReport() {
            exportToPDF();
        }

        // Paramètres
        function saveGeneralSettings() {
            const orgName = document.getElementById('orgName').value;
            const orgEmail = document.getElementById('orgEmail').value;
            
            localStorage.setItem('sgg_orgName', orgName);
            localStorage.setItem('sgg_orgEmail', orgEmail);
            
            showAlert('Paramètres généraux enregistrés!', 'success');
        }

        function saveNotificationSettings() {
            const settings = {
                notifyOverdue: document.getElementById('notifyOverdue').checked,
                notifyDeadline: document.getElementById('notifyDeadline').checked,
                notifyNew: document.getElementById('notifyNew').checked
            };
            
            localStorage.setItem('sgg_notifications', JSON.stringify(settings));
            showAlert('Paramètres de notifications enregistrés!', 'success');
        }

        // Utilitaires
        function calculateProgress(action) {
            if (action.statut === 'termine') return 100;
            if (action.statut === 'nouveau') return 0;
            if (action.statut === 'en-cours') {
                const start = new Date(action.dateDebut);
                const end = new Date(action.dateFin);
                const now = new Date();
                
                if (now >= end) return 90;
                if (now <= start) return 10;
                
                const total = end - start;
                const elapsed = now - start;
                return Math.min(90, Math.max(10, Math.round((elapsed / total) * 100)));
            }
            return 0;
        }

        function checkIfOverdue(action) {
            if (action.statut === 'termine') return false;
            const endDate = new Date(action.dateFin);
            const now = new Date();
            return now > endDate;
        }

        function formatDate(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            return date.toLocaleDateString('fr-FR');
        }

        function getStatusLabel(status) {
            const labels = {
                'nouveau': 'Nouveau',
                'en-cours': 'En Cours',
                'termine': 'Terminé',
                'en-retard': 'En Retard'
            };
            return labels[status] || status;
        }

        function showAlert(message, type) {
            const alert = document.createElement('div');
            alert.className = `alert ${type}`;
            alert.textContent = message;
            document.body.appendChild(alert);
            
            setTimeout(() => {
                alert.style.opacity = '0';
                setTimeout(() => {
                    document.body.removeChild(alert);
                }, 300);
            }, 3000);
        }

        // Administration
        async function loadPendingUsers() {
            try {
                const response = await fetch(`${API_URL}/users/pending`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    // Mettre à jour les stats
                    document.getElementById('pendingUsers').textContent = data.count;
                    
                    // Afficher les utilisateurs en attente
                    const tbody = document.getElementById('pendingUsersTable');
                    tbody.innerHTML = '';
                    
                    data.users.forEach(user => {
                        const row = tbody.insertRow();
                        row.innerHTML = `
                            <td>${user.name}</td>
                            <td>${user.email}</td>
                            <td>${user.ministry}</td>
                            <td>${new Date(user.created_at).toLocaleDateString('fr-FR')}</td>
                            <td>
                                <button class="btn btn-success" onclick="activateUser(${user.id})">✅ Activer</button>
                                <button class="btn btn-danger" onclick="deleteUser(${user.id})">❌ Refuser</button>
                            </td>
                        `;
                    });
                }
            } catch (error) {
                console.error('Erreur chargement utilisateurs en attente:', error);
            }
            
            // Charger tous les utilisateurs
            loadAllUsers();
        }

        async function loadAllUsers() {
            try {
                const response = await fetch(`${API_URL}/users`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const users = await response.json();
                    
                    // Mettre à jour les stats
                    document.getElementById('totalUsers').textContent = users.length;
                    document.getElementById('activeUsers').textContent = users.filter(u => u.is_active).length;
                    
                    // Afficher tous les utilisateurs
                    const tbody = document.getElementById('allUsersTable');
                    tbody.innerHTML = '';
                    
                    users.forEach(user => {
                        const row = tbody.insertRow();
                        const statusBadge = user.is_active 
                            ? '<span class="status-badge termine">Actif</span>' 
                            : '<span class="status-badge en-retard">Inactif</span>';
                        
                        const roleBadge = user.role === 'admin' 
                            ? '<span class="status-badge nouveau">Admin</span>' 
                            : '<span class="status-badge">User</span>';
                        
                        // Badge permissions
                        const permissionsBadge = user.is_super_admin 
                            ? '<span class="status-badge nouveau">Super Admin</span>'
                            : '<span class="status-badge">Standard</span>';
                        
                        row.innerHTML = `
                            <td>${user.name}</td>
                            <td>${user.email}</td>
                            <td>${user.ministry}</td>
                            <td>${roleBadge}</td>
                            <td>${statusBadge}</td>
                            <td>${permissionsBadge}</td>
                            <td>${user.last_login ? new Date(user.last_login).toLocaleDateString('fr-FR') : '-'}</td>
                            <td>
                                ${user.id !== currentUser.id ? `
                                    <button class="btn-icon" onclick="openPermissionsModal(${user.id}, '${user.name}')">🔐</button>
                                    ${!user.is_active ? `<button class="btn-icon edit" onclick="activateUser(${user.id})">✅</button>` : ''}
                                    ${user.is_active ? `<button class="btn-icon" onclick="deactivateUser(${user.id})">🔒</button>` : ''}
                                    ${user.role === 'user' ? `<button class="btn-icon" onclick="makeAdmin(${user.id})">👑</button>` : ''}
                                    <button class="btn-icon delete" onclick="deleteUser(${user.id})">🗑️</button>
                                ` : '<span style="color: #7f8c8d;">Vous</span>'}
                            </td>
                        `;
                    });
                }
            } catch (error) {
                console.error('Erreur chargement utilisateurs:', error);
            }
        }

        // Fonctions de gestion des permissions
        async function openPermissionsModal(userId, userName) {
            document.getElementById('permUserId').value = userId;
            document.getElementById('permUserName').textContent = userName;
            
            // Charger les ministères disponibles
            const checkboxList = document.getElementById('ministryCheckboxList');
            checkboxList.innerHTML = '';
            
            ministries.forEach(ministry => {
                const div = document.createElement('div');
                div.innerHTML = `
                    <label>
                        <input type="checkbox" class="ministry-checkbox" value="${ministry.id}" data-name="${ministry.name}">
                        ${ministry.name} ${ministry.abbrev ? `(${ministry.abbrev})` : ''}
                    </label>
                `;
                checkboxList.appendChild(div);
            });
            
            // Charger les permissions existantes
            try {
                const response = await fetch(`${API_URL}/permissions/user/${userId}`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    // Si super admin, cocher toutes les cases
                    if (data.is_super_admin) {
                        document.getElementById('applyToAllMinistries').checked = true;
                        toggleMinistrySelection();
                        // Cocher toutes les permissions
                        document.querySelectorAll('[id^="perm_"]').forEach(checkbox => {
                            checkbox.checked = true;
                        });
                    } else {
                        // Appliquer les permissions par ministère
                        data.permissions.forEach(perm => {
                            if (perm.ministry_id) {
                                const checkbox = document.querySelector(`.ministry-checkbox[value="${perm.ministry_id}"]`);
                                if (checkbox && (perm.can_view_actions || perm.can_create_actions)) {
                                    checkbox.checked = true;
                                }
                            }
                        });
                    }
                }
            } catch (error) {
                console.error('Erreur chargement permissions:', error);
            }
            
            document.getElementById('permissionsModal').classList.add('active');
        }

        function closePermissionsModal() {
            document.getElementById('permissionsModal').classList.remove('active');
        }

        function toggleMinistrySelection() {
            const applyToAll = document.getElementById('applyToAllMinistries').checked;
            const ministryDiv = document.getElementById('ministrySelectionDiv');
            
            if (applyToAll) {
                ministryDiv.style.display = 'none';
                // Cocher tous les ministères
                document.querySelectorAll('.ministry-checkbox').forEach(cb => cb.checked = true);
            } else {
                ministryDiv.style.display = 'block';
            }
        }

        function applyPermissionProfile(profile) {
            const profiles = {
                'reader': {
                    can_view_actions: true,
                    can_create_actions: false,
                    can_edit_actions: false,
                    can_delete_actions: false,
                    can_view_team: true,
                    can_manage_team: false,
                    can_view_reports: true,
                    can_export_data: false
                },
                'contributor': {
                    can_view_actions: true,
                    can_create_actions: true,
                    can_edit_actions: true,
                    can_delete_actions: false,
                    can_view_team: true,
                    can_manage_team: false,
                    can_view_reports: true,
                    can_export_data: true
                },
                'manager': {
                    can_view_actions: true,
                    can_create_actions: true,
                    can_edit_actions: true,
                    can_delete_actions: true,
                    can_view_team: true,
                    can_manage_team: true,
                    can_view_reports: true,
                    can_export_data: true
                },
                'admin': {
                    can_view_actions: true,
                    can_create_actions: true,
                    can_edit_actions: true,
                    can_delete_actions: true,
                    can_view_team: true,
                    can_manage_team: true,
                    can_view_reports: true,
                    can_export_data: true
                }
            };
            
            const permissions = profiles[profile];
            if (permissions) {
                Object.keys(permissions).forEach(key => {
                    const checkbox = document.getElementById('perm_' + key);
                    if (checkbox) {
                        checkbox.checked = permissions[key];
                    }
                });
                
                if (profile === 'admin') {
                    document.getElementById('applyToAllMinistries').checked = true;
                    toggleMinistrySelection();
                }
            }
        }

        async function savePermissions() {
            const userId = document.getElementById('permUserId').value;
            const applyToAll = document.getElementById('applyToAllMinistries').checked;
            
            const permissions = {
                can_view_actions: document.getElementById('perm_view_actions').checked,
                can_create_actions: document.getElementById('perm_create_actions').checked,
                can_edit_actions: document.getElementById('perm_edit_actions').checked,
                can_delete_actions: document.getElementById('perm_delete_actions').checked,
                can_view_team: document.getElementById('perm_view_team').checked,
                can_manage_team: document.getElementById('perm_manage_team').checked,
                can_view_reports: document.getElementById('perm_view_reports').checked,
                can_export_data: document.getElementById('perm_export_data').checked
            };
            
            try {
                if (applyToAll) {
                    // Appliquer à tous les ministères
                    const response = await fetch(`${API_URL}/permissions/assign`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${authToken}`
                        },
                        body: JSON.stringify({
                            user_id: userId,
                            apply_to_all_ministries: true,
                            permissions: permissions
                        })
                    });
                    
                    if (response.ok) {
                        showAlert('Permissions appliquées à tous les ministères', 'success');
                        closePermissionsModal();
                    }
                } else {
                    // Appliquer aux ministères sélectionnés
                    const selectedMinistries = Array.from(document.querySelectorAll('.ministry-checkbox:checked'))
                        .map(cb => cb.value);
                    
                    if (selectedMinistries.length === 0) {
                        showAlert('Veuillez sélectionner au moins un ministère', 'warning');
                        return;
                    }
                    
                    for (const ministryId of selectedMinistries) {
                        await fetch(`${API_URL}/permissions/assign`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${authToken}`
                            },
                            body: JSON.stringify({
                                user_id: userId,
                                ministry_id: ministryId,
                                permissions: permissions
                            })
                        });
                    }
                    
                    showAlert('Permissions mises à jour avec succès', 'success');
                    closePermissionsModal();
                }
            } catch (error) {
                console.error('Erreur sauvegarde permissions:', error);
                showAlert('Erreur lors de la sauvegarde des permissions', 'error');
            }
        }

        async function revokeAllPermissions() {
            if (!confirm('Révoquer toutes les permissions de cet utilisateur ?')) return;
            
            const userId = document.getElementById('permUserId').value;
            
            try {
                const response = await fetch(`${API_URL}/permissions/revoke`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({
                        user_id: userId,
                        revoke_all: true
                    })
                });
                
                if (response.ok) {
                    showAlert('Toutes les permissions ont été révoquées', 'warning');
                    closePermissionsModal();
                }
            } catch (error) {
                console.error('Erreur révocation permissions:', error);
                showAlert('Erreur lors de la révocation', 'error');
            }
        }

        async function activateUser(userId) {
            if (confirm('Activer cet utilisateur ?')) {
                try {
                    const response = await fetch(`${API_URL}/users/${userId}/activate`, {
                        method: 'PUT',
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        }
                    });
                    
                    if (response.ok) {
                        showAlert('Utilisateur activé avec succès', 'success');
                        loadPendingUsers();
                    } else {
                        const error = await response.json();
                        showAlert(error.error || 'Erreur lors de l\'activation', 'error');
                    }
                } catch (error) {
                    console.error('Erreur activation:', error);
                    showAlert('Erreur de connexion', 'error');
                }
            }
        }

        async function deactivateUser(userId) {
            if (confirm('Désactiver cet utilisateur ?')) {
                try {
                    const response = await fetch(`${API_URL}/users/${userId}/deactivate`, {
                        method: 'PUT',
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        }
                    });
                    
                    if (response.ok) {
                        showAlert('Utilisateur désactivé', 'warning');
                        loadPendingUsers();
                    }
                } catch (error) {
                    console.error('Erreur désactivation:', error);
                }
            }
        }

        async function deleteUser(userId) {
            if (confirm('Supprimer définitivement cet utilisateur ?')) {
                try {
                    const response = await fetch(`${API_URL}/users/${userId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        }
                    });
                    
                    if (response.ok) {
                        showAlert('Utilisateur supprimé', 'warning');
                        loadPendingUsers();
                    }
                } catch (error) {
                    console.error('Erreur suppression:', error);
                }
            }
        }

        async function makeAdmin(userId) {
            if (confirm('Donner les droits administrateur à cet utilisateur ?')) {
                try {
                    const response = await fetch(`${API_URL}/users/${userId}/role`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${authToken}`
                        },
                        body: JSON.stringify({ role: 'admin' })
                    });
                    
                    if (response.ok) {
                        showAlert('Droits administrateur accordés', 'success');
                        loadPendingUsers();
                    }
                } catch (error) {
                    console.error('Erreur modification rôle:', error);
                }
            }
        }

        // Raccourcis clavier
        document.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
                e.preventDefault();
                openActionModal();
            }
            
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                backupData();
            }
            
            if (e.key === 'Escape') {
                closeActionModal();
                closeTeamModal();
                closeMinistryModal();
            }
        });
    </script>
</body>
</html>
